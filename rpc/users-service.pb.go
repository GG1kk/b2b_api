// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: rpc/users-service.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetUserByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetUserByIDRequest) Reset() {
	*x = GetUserByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByIDRequest) ProtoMessage() {}

func (x *GetUserByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByIDRequest.ProtoReflect.Descriptor instead.
func (*GetUserByIDRequest) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserByIDRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCompaniesByCountryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *GetCompaniesByCountryRequest) Reset() {
	*x = GetCompaniesByCountryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompaniesByCountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompaniesByCountryRequest) ProtoMessage() {}

func (x *GetCompaniesByCountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompaniesByCountryRequest.ProtoReflect.Descriptor instead.
func (*GetCompaniesByCountryRequest) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetCompaniesByCountryRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type GetCompaniesByCountryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Companies []*Company `protobuf:"bytes,1,rep,name=companies,proto3" json:"companies,omitempty"`
}

func (x *GetCompaniesByCountryReply) Reset() {
	*x = GetCompaniesByCountryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompaniesByCountryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompaniesByCountryReply) ProtoMessage() {}

func (x *GetCompaniesByCountryReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompaniesByCountryReply.ProtoReflect.Descriptor instead.
func (*GetCompaniesByCountryReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetCompaniesByCountryReply) GetCompanies() []*Company {
	if x != nil {
		return x.Companies
	}
	return nil
}

type GetBrokerCommissionByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID string `protobuf:"bytes,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
}

func (x *GetBrokerCommissionByIDRequest) Reset() {
	*x = GetBrokerCommissionByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrokerCommissionByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrokerCommissionByIDRequest) ProtoMessage() {}

func (x *GetBrokerCommissionByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrokerCommissionByIDRequest.ProtoReflect.Descriptor instead.
func (*GetBrokerCommissionByIDRequest) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetBrokerCommissionByIDRequest) GetCompanyID() string {
	if x != nil {
		return x.CompanyID
	}
	return ""
}

type GetBrokerCommissionByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commission int32 `protobuf:"varint,1,opt,name=commission,proto3" json:"commission,omitempty"`
}

func (x *GetBrokerCommissionByIDReply) Reset() {
	*x = GetBrokerCommissionByIDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrokerCommissionByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrokerCommissionByIDReply) ProtoMessage() {}

func (x *GetBrokerCommissionByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrokerCommissionByIDReply.ProtoReflect.Descriptor instead.
func (*GetBrokerCommissionByIDReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetBrokerCommissionByIDReply) GetCommission() int32 {
	if x != nil {
		return x.Commission
	}
	return 0
}

type CheckTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CheckTokenRequest) Reset() {
	*x = CheckTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenRequest) ProtoMessage() {}

func (x *CheckTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenRequest.ProtoReflect.Descriptor instead.
func (*CheckTokenRequest) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{5}
}

func (x *CheckTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetUserByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=Email,proto3" json:"Email,omitempty"`
}

func (x *GetUserByIDReply) Reset() {
	*x = GetUserByIDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByIDReply) ProtoMessage() {}

func (x *GetUserByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByIDReply.ProtoReflect.Descriptor instead.
func (*GetUserByIDReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserByIDReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type CheckTokenWithUserReturnedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CheckTokenWithUserReturnedRequest) Reset() {
	*x = CheckTokenWithUserReturnedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenWithUserReturnedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenWithUserReturnedRequest) ProtoMessage() {}

func (x *CheckTokenWithUserReturnedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenWithUserReturnedRequest.ProtoReflect.Descriptor instead.
func (*CheckTokenWithUserReturnedRequest) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{7}
}

func (x *CheckTokenWithUserReturnedRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CheckTokenWithUserReturnedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	IsValid bool   `protobuf:"varint,2,opt,name=isValid,proto3" json:"isValid,omitempty"`
}

func (x *CheckTokenWithUserReturnedReply) Reset() {
	*x = CheckTokenWithUserReturnedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenWithUserReturnedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenWithUserReturnedReply) ProtoMessage() {}

func (x *CheckTokenWithUserReturnedReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenWithUserReturnedReply.ProtoReflect.Descriptor instead.
func (*CheckTokenWithUserReturnedReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{8}
}

func (x *CheckTokenWithUserReturnedReply) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CheckTokenWithUserReturnedReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

type GetCompanyByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID string `protobuf:"bytes,1,opt,name=CompanyID,proto3" json:"CompanyID,omitempty"`
}

func (x *GetCompanyByIDRequest) Reset() {
	*x = GetCompanyByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyByIDRequest) ProtoMessage() {}

func (x *GetCompanyByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyByIDRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyByIDRequest) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetCompanyByIDRequest) GetCompanyID() string {
	if x != nil {
		return x.CompanyID
	}
	return ""
}

type GetCompanyUsersByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID string `protobuf:"bytes,1,opt,name=CompanyID,proto3" json:"CompanyID,omitempty"`
}

func (x *GetCompanyUsersByIDRequest) Reset() {
	*x = GetCompanyUsersByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyUsersByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyUsersByIDRequest) ProtoMessage() {}

func (x *GetCompanyUsersByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyUsersByIDRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyUsersByIDRequest) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetCompanyUsersByIDRequest) GetCompanyID() string {
	if x != nil {
		return x.CompanyID
	}
	return ""
}

type GetCompanyByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	LegalName      string `protobuf:"bytes,2,opt,name=LegalName,proto3" json:"LegalName,omitempty"`
	CommercialName string `protobuf:"bytes,3,opt,name=CommercialName,proto3" json:"CommercialName,omitempty"`
	Country        string `protobuf:"bytes,4,opt,name=Country,proto3" json:"Country,omitempty"`
	RegNumber      string `protobuf:"bytes,5,opt,name=RegNumber,proto3" json:"RegNumber,omitempty"`
	LegalAddress   string `protobuf:"bytes,6,opt,name=LegalAddress,proto3" json:"LegalAddress,omitempty"`
	RealAddress    string `protobuf:"bytes,7,opt,name=RealAddress,proto3" json:"RealAddress,omitempty"`
	Phone          string `protobuf:"bytes,8,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Email          string `protobuf:"bytes,9,opt,name=Email,proto3" json:"Email,omitempty"`
	Site           string `protobuf:"bytes,10,opt,name=Site,proto3" json:"Site,omitempty"`
	HandlerID      string `protobuf:"bytes,11,opt,name=HandlerID,proto3" json:"HandlerID,omitempty"`
}

func (x *GetCompanyByIDReply) Reset() {
	*x = GetCompanyByIDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyByIDReply) ProtoMessage() {}

func (x *GetCompanyByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyByIDReply.ProtoReflect.Descriptor instead.
func (*GetCompanyByIDReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetCompanyByIDReply) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetCompanyByIDReply) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *GetCompanyByIDReply) GetCommercialName() string {
	if x != nil {
		return x.CommercialName
	}
	return ""
}

func (x *GetCompanyByIDReply) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GetCompanyByIDReply) GetRegNumber() string {
	if x != nil {
		return x.RegNumber
	}
	return ""
}

func (x *GetCompanyByIDReply) GetLegalAddress() string {
	if x != nil {
		return x.LegalAddress
	}
	return ""
}

func (x *GetCompanyByIDReply) GetRealAddress() string {
	if x != nil {
		return x.RealAddress
	}
	return ""
}

func (x *GetCompanyByIDReply) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetCompanyByIDReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetCompanyByIDReply) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *GetCompanyByIDReply) GetHandlerID() string {
	if x != nil {
		return x.HandlerID
	}
	return ""
}

type GetCompanyUsersByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDs []string `protobuf:"bytes,1,rep,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *GetCompanyUsersByIDReply) Reset() {
	*x = GetCompanyUsersByIDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyUsersByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyUsersByIDReply) ProtoMessage() {}

func (x *GetCompanyUsersByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyUsersByIDReply.ProtoReflect.Descriptor instead.
func (*GetCompanyUsersByIDReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetCompanyUsersByIDReply) GetIDs() []string {
	if x != nil {
		return x.IDs
	}
	return nil
}

type CheckTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool   `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	UserID  string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Group   int32  `protobuf:"varint,3,opt,name=group,proto3" json:"group,omitempty"`
	Role    int32  `protobuf:"varint,4,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *CheckTokenReply) Reset() {
	*x = CheckTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenReply) ProtoMessage() {}

func (x *CheckTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenReply.ProtoReflect.Descriptor instead.
func (*CheckTokenReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{13}
}

func (x *CheckTokenReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenReply) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CheckTokenReply) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *CheckTokenReply) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

type CheckTokenIsSuperAdminReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid   bool   `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Group     int32  `protobuf:"varint,5,opt,name=group,proto3" json:"group,omitempty"`
	Role      int32  `protobuf:"varint,6,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *CheckTokenIsSuperAdminReply) Reset() {
	*x = CheckTokenIsSuperAdminReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsSuperAdminReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsSuperAdminReply) ProtoMessage() {}

func (x *CheckTokenIsSuperAdminReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsSuperAdminReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsSuperAdminReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{14}
}

func (x *CheckTokenIsSuperAdminReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsSuperAdminReply) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CheckTokenIsSuperAdminReply) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CheckTokenIsSuperAdminReply) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CheckTokenIsSuperAdminReply) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *CheckTokenIsSuperAdminReply) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

type CheckTokenIsBrokerGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid   bool   `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	UserID    string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Group     int32  `protobuf:"varint,5,opt,name=group,proto3" json:"group,omitempty"`
	Role      int32  `protobuf:"varint,6,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *CheckTokenIsBrokerGroupReply) Reset() {
	*x = CheckTokenIsBrokerGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsBrokerGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsBrokerGroupReply) ProtoMessage() {}

func (x *CheckTokenIsBrokerGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsBrokerGroupReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsBrokerGroupReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{15}
}

func (x *CheckTokenIsBrokerGroupReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsBrokerGroupReply) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupReply) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupReply) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupReply) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *CheckTokenIsBrokerGroupReply) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

type CheckTokenIsBrokerGroupWithManagedCompanyIdsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid    bool     `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	UserID     string   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	FirstName  string   `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName   string   `protobuf:"bytes,4,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Group      int32    `protobuf:"varint,5,opt,name=group,proto3" json:"group,omitempty"`
	Role       int32    `protobuf:"varint,6,opt,name=role,proto3" json:"role,omitempty"`
	ManagedIds []string `protobuf:"bytes,7,rep,name=managedIds,proto3" json:"managedIds,omitempty"`
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) Reset() {
	*x = CheckTokenIsBrokerGroupWithManagedCompanyIdsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) ProtoMessage() {}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsBrokerGroupWithManagedCompanyIdsReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{16}
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) GetManagedIds() []string {
	if x != nil {
		return x.ManagedIds
	}
	return nil
}

type CheckTokenIsBrokerGroupWithManagedUserIdsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid    bool     `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	UserID     string   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	FirstName  string   `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName   string   `protobuf:"bytes,4,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Group      int32    `protobuf:"varint,5,opt,name=group,proto3" json:"group,omitempty"`
	Role       int32    `protobuf:"varint,6,opt,name=role,proto3" json:"role,omitempty"`
	ManagedIds []string `protobuf:"bytes,7,rep,name=managedIds,proto3" json:"managedIds,omitempty"`
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) Reset() {
	*x = CheckTokenIsBrokerGroupWithManagedUserIdsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsBrokerGroupWithManagedUserIdsReply) ProtoMessage() {}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsBrokerGroupWithManagedUserIdsReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsBrokerGroupWithManagedUserIdsReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{17}
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) GetManagedIds() []string {
	if x != nil {
		return x.ManagedIds
	}
	return nil
}

type CheckTokenIsBrokerGroupWithManagedUsersDropdownReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid      bool            `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	UserID       string          `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	FirstName    string          `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName     string          `protobuf:"bytes,4,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Group        int32           `protobuf:"varint,5,opt,name=group,proto3" json:"group,omitempty"`
	Role         int32           `protobuf:"varint,6,opt,name=role,proto3" json:"role,omitempty"`
	ManagedUsers []*DropdownUser `protobuf:"bytes,7,rep,name=managedUsers,proto3" json:"managedUsers,omitempty"`
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) Reset() {
	*x = CheckTokenIsBrokerGroupWithManagedUsersDropdownReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) ProtoMessage() {}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsBrokerGroupWithManagedUsersDropdownReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{18}
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) GetManagedUsers() []*DropdownUser {
	if x != nil {
		return x.ManagedUsers
	}
	return nil
}

type CheckTokenIsPlantationGroupWithUserAndCompanyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool     `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	User    *User    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Company *Company `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyReply) Reset() {
	*x = CheckTokenIsPlantationGroupWithUserAndCompanyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsPlantationGroupWithUserAndCompanyReply) ProtoMessage() {}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsPlantationGroupWithUserAndCompanyReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsPlantationGroupWithUserAndCompanyReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{19}
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyReply) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyReply) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

type CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool     `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	User    *User    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Company *Company `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
	UserIDs []string `protobuf:"bytes,4,rep,name=UserIDs,proto3" json:"UserIDs,omitempty"`
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) Reset() {
	*x = CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) ProtoMessage() {}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{20}
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid      bool            `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	User         *User           `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Company      *Company        `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
	ManagedUsers []*DropdownUser `protobuf:"bytes,4,rep,name=managedUsers,proto3" json:"managedUsers,omitempty"`
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) Reset() {
	*x = CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) ProtoMessage() {}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{21}
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetManagedUsers() []*DropdownUser {
	if x != nil {
		return x.ManagedUsers
	}
	return nil
}

type CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool     `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	User    *User    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Company *Company `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
	UserIDs []string `protobuf:"bytes,4,rep,name=UserIDs,proto3" json:"UserIDs,omitempty"`
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) Reset() {
	*x = CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) ProtoMessage() {}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{22}
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid      bool            `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	User         *User           `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Company      *Company        `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
	ManagedUsers []*DropdownUser `protobuf:"bytes,4,rep,name=managedUsers,proto3" json:"managedUsers,omitempty"`
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) Reset() {
	*x = CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) ProtoMessage() {}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{23}
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetManagedUsers() []*DropdownUser {
	if x != nil {
		return x.ManagedUsers
	}
	return nil
}

type CheckTokenIsClientGroupWithUserAndCompanyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool     `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	User    *User    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Company *Company `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyReply) Reset() {
	*x = CheckTokenIsClientGroupWithUserAndCompanyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsClientGroupWithUserAndCompanyReply) ProtoMessage() {}

func (x *CheckTokenIsClientGroupWithUserAndCompanyReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsClientGroupWithUserAndCompanyReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsClientGroupWithUserAndCompanyReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{24}
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyReply) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyReply) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Group     int32  `protobuf:"varint,4,opt,name=group,proto3" json:"group,omitempty"`
	Role      int32  `protobuf:"varint,5,opt,name=role,proto3" json:"role,omitempty"`
	Email     string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{25}
}

func (x *User) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *User) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	LegalName      string `protobuf:"bytes,2,opt,name=LegalName,proto3" json:"LegalName,omitempty"`
	CommercialName string `protobuf:"bytes,3,opt,name=CommercialName,proto3" json:"CommercialName,omitempty"`
}

func (x *Company) Reset() {
	*x = Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{26}
}

func (x *Company) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Company) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *Company) GetCommercialName() string {
	if x != nil {
		return x.CommercialName
	}
	return ""
}

type DropdownUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	CompanyName string `protobuf:"bytes,3,opt,name=CompanyName,proto3" json:"CompanyName,omitempty"`
}

func (x *DropdownUser) Reset() {
	*x = DropdownUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropdownUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropdownUser) ProtoMessage() {}

func (x *DropdownUser) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropdownUser.ProtoReflect.Descriptor instead.
func (*DropdownUser) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{27}
}

func (x *DropdownUser) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DropdownUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DropdownUser) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type DecodeTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DecodeTokenRequest) Reset() {
	*x = DecodeTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeTokenRequest) ProtoMessage() {}

func (x *DecodeTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeTokenRequest.ProtoReflect.Descriptor instead.
func (*DecodeTokenRequest) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{28}
}

func (x *DecodeTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DecodeTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *DecodeTokenReply) Reset() {
	*x = DecodeTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_users_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeTokenReply) ProtoMessage() {}

func (x *DecodeTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_users_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeTokenReply.ProtoReflect.Descriptor instead.
func (*DecodeTokenReply) Descriptor() ([]byte, []int) {
	return file_rpc_users_service_proto_rawDescGZIP(), []int{29}
}

func (x *DecodeTokenReply) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

var File_rpc_users_service_proto protoreflect.FileDescriptor

var file_rpc_users_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x72, 0x70, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x38, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x42,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x44, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x22,
	0x3e, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22,
	0x3e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x29, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x28, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x22, 0x39, 0x0a, 0x21, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x53, 0x0a, 0x1f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0xc7, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x65, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53,
	0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x2c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x49, 0x44, 0x73, 0x22,
	0x6d, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xb3,
	0x01, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x31,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x64, 0x73,
	0x22, 0xff, 0x01, 0x0a, 0x34, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f, 0x70,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x31, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x32, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x22, 0xb8, 0x01, 0x0a, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0xd7, 0x01,
	0x0a, 0x49, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x72,
	0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x31, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x72, 0x6f,
	0x70, 0x64, 0x6f, 0x77, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x3f, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0xd3,
	0x01, 0x0a, 0x45, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x31, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f,
	0x77, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x22, 0x90, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0x5f, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x12, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x32, 0xe3, 0x0f, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0a,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x12, 0x22, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x2c, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x72, 0x0a, 0x29, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12,
	0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x2f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x2d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x9c, 0x01, 0x0a, 0x3e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0xa8, 0x01, 0x0a, 0x44, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57,
	0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x29, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x94,
	0x01, 0x0a, 0x3a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x12, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x40, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x40, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1f, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x0b, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x13,
	0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x72, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_users_service_proto_rawDescOnce sync.Once
	file_rpc_users_service_proto_rawDescData = file_rpc_users_service_proto_rawDesc
)

func file_rpc_users_service_proto_rawDescGZIP() []byte {
	file_rpc_users_service_proto_rawDescOnce.Do(func() {
		file_rpc_users_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_users_service_proto_rawDescData)
	})
	return file_rpc_users_service_proto_rawDescData
}

var file_rpc_users_service_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_rpc_users_service_proto_goTypes = []interface{}{
	(*GetUserByIDRequest)(nil),                                                        // 0: GetUserByIDRequest
	(*GetCompaniesByCountryRequest)(nil),                                              // 1: GetCompaniesByCountryRequest
	(*GetCompaniesByCountryReply)(nil),                                                // 2: GetCompaniesByCountryReply
	(*GetBrokerCommissionByIDRequest)(nil),                                            // 3: GetBrokerCommissionByIDRequest
	(*GetBrokerCommissionByIDReply)(nil),                                              // 4: GetBrokerCommissionByIDReply
	(*CheckTokenRequest)(nil),                                                         // 5: CheckTokenRequest
	(*GetUserByIDReply)(nil),                                                          // 6: GetUserByIDReply
	(*CheckTokenWithUserReturnedRequest)(nil),                                         // 7: CheckTokenWithUserReturnedRequest
	(*CheckTokenWithUserReturnedReply)(nil),                                           // 8: CheckTokenWithUserReturnedReply
	(*GetCompanyByIDRequest)(nil),                                                     // 9: GetCompanyByIDRequest
	(*GetCompanyUsersByIDRequest)(nil),                                                // 10: GetCompanyUsersByIDRequest
	(*GetCompanyByIDReply)(nil),                                                       // 11: GetCompanyByIDReply
	(*GetCompanyUsersByIDReply)(nil),                                                  // 12: GetCompanyUsersByIDReply
	(*CheckTokenReply)(nil),                                                           // 13: CheckTokenReply
	(*CheckTokenIsSuperAdminReply)(nil),                                               // 14: CheckTokenIsSuperAdminReply
	(*CheckTokenIsBrokerGroupReply)(nil),                                              // 15: CheckTokenIsBrokerGroupReply
	(*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply)(nil),                         // 16: CheckTokenIsBrokerGroupWithManagedCompanyIdsReply
	(*CheckTokenIsBrokerGroupWithManagedUserIdsReply)(nil),                            // 17: CheckTokenIsBrokerGroupWithManagedUserIdsReply
	(*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply)(nil),                      // 18: CheckTokenIsBrokerGroupWithManagedUsersDropdownReply
	(*CheckTokenIsPlantationGroupWithUserAndCompanyReply)(nil),                        // 19: CheckTokenIsPlantationGroupWithUserAndCompanyReply
	(*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply)(nil),       // 20: CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply
	(*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply)(nil), // 21: CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply
	(*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply)(nil),           // 22: CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply
	(*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply)(nil),     // 23: CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply
	(*CheckTokenIsClientGroupWithUserAndCompanyReply)(nil),                            // 24: CheckTokenIsClientGroupWithUserAndCompanyReply
	(*User)(nil),               // 25: User
	(*Company)(nil),            // 26: Company
	(*DropdownUser)(nil),       // 27: DropdownUser
	(*DecodeTokenRequest)(nil), // 28: DecodeTokenRequest
	(*DecodeTokenReply)(nil),   // 29: DecodeTokenReply
}
var file_rpc_users_service_proto_depIdxs = []int32{
	26, // 0: GetCompaniesByCountryReply.companies:type_name -> Company
	27, // 1: CheckTokenIsBrokerGroupWithManagedUsersDropdownReply.managedUsers:type_name -> DropdownUser
	25, // 2: CheckTokenIsPlantationGroupWithUserAndCompanyReply.user:type_name -> User
	26, // 3: CheckTokenIsPlantationGroupWithUserAndCompanyReply.company:type_name -> Company
	25, // 4: CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply.user:type_name -> User
	26, // 5: CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply.company:type_name -> Company
	25, // 6: CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply.user:type_name -> User
	26, // 7: CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply.company:type_name -> Company
	27, // 8: CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply.managedUsers:type_name -> DropdownUser
	25, // 9: CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply.user:type_name -> User
	26, // 10: CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply.company:type_name -> Company
	25, // 11: CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply.user:type_name -> User
	26, // 12: CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply.company:type_name -> Company
	27, // 13: CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply.managedUsers:type_name -> DropdownUser
	25, // 14: CheckTokenIsClientGroupWithUserAndCompanyReply.user:type_name -> User
	26, // 15: CheckTokenIsClientGroupWithUserAndCompanyReply.company:type_name -> Company
	0,  // 16: UsersService.GetUserByID:input_type -> GetUserByIDRequest
	5,  // 17: UsersService.CheckToken:input_type -> CheckTokenRequest
	7,  // 18: UsersService.CheckTokenWithUserReturned:input_type -> CheckTokenWithUserReturnedRequest
	5,  // 19: UsersService.CheckTokenIsBrokerGroupWithManagedCompanyIds:input_type -> CheckTokenRequest
	5,  // 20: UsersService.CheckTokenIsBrokerGroupWithManagedUserIds:input_type -> CheckTokenRequest
	5,  // 21: UsersService.CheckTokenIsBrokerGroupWithManagedUsersDropdown:input_type -> CheckTokenRequest
	5,  // 22: UsersService.CheckTokenIsBrokerGroup:input_type -> CheckTokenRequest
	5,  // 23: UsersService.CheckTokenIsSuperAdmin:input_type -> CheckTokenRequest
	5,  // 24: UsersService.CheckTokenIsPlantationGroupWithUserAndCompany:input_type -> CheckTokenRequest
	5,  // 25: UsersService.CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs:input_type -> CheckTokenRequest
	5,  // 26: UsersService.CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown:input_type -> CheckTokenRequest
	5,  // 27: UsersService.CheckTokenIsClientGroupWithUserAndCompany:input_type -> CheckTokenRequest
	5,  // 28: UsersService.CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs:input_type -> CheckTokenRequest
	5,  // 29: UsersService.CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown:input_type -> CheckTokenRequest
	9,  // 30: UsersService.GetCompanyByID:input_type -> GetCompanyByIDRequest
	10, // 31: UsersService.GetCompanyUsersByID:input_type -> GetCompanyUsersByIDRequest
	1,  // 32: UsersService.GetCompaniesByCountry:input_type -> GetCompaniesByCountryRequest
	3,  // 33: UsersService.GetBrokerCommissionByID:input_type -> GetBrokerCommissionByIDRequest
	28, // 34: UsersService.DecodeToken:input_type -> DecodeTokenRequest
	6,  // 35: UsersService.GetUserByID:output_type -> GetUserByIDReply
	13, // 36: UsersService.CheckToken:output_type -> CheckTokenReply
	8,  // 37: UsersService.CheckTokenWithUserReturned:output_type -> CheckTokenWithUserReturnedReply
	16, // 38: UsersService.CheckTokenIsBrokerGroupWithManagedCompanyIds:output_type -> CheckTokenIsBrokerGroupWithManagedCompanyIdsReply
	17, // 39: UsersService.CheckTokenIsBrokerGroupWithManagedUserIds:output_type -> CheckTokenIsBrokerGroupWithManagedUserIdsReply
	18, // 40: UsersService.CheckTokenIsBrokerGroupWithManagedUsersDropdown:output_type -> CheckTokenIsBrokerGroupWithManagedUsersDropdownReply
	15, // 41: UsersService.CheckTokenIsBrokerGroup:output_type -> CheckTokenIsBrokerGroupReply
	14, // 42: UsersService.CheckTokenIsSuperAdmin:output_type -> CheckTokenIsSuperAdminReply
	19, // 43: UsersService.CheckTokenIsPlantationGroupWithUserAndCompany:output_type -> CheckTokenIsPlantationGroupWithUserAndCompanyReply
	20, // 44: UsersService.CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs:output_type -> CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply
	21, // 45: UsersService.CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown:output_type -> CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply
	24, // 46: UsersService.CheckTokenIsClientGroupWithUserAndCompany:output_type -> CheckTokenIsClientGroupWithUserAndCompanyReply
	22, // 47: UsersService.CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs:output_type -> CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply
	23, // 48: UsersService.CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown:output_type -> CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply
	11, // 49: UsersService.GetCompanyByID:output_type -> GetCompanyByIDReply
	12, // 50: UsersService.GetCompanyUsersByID:output_type -> GetCompanyUsersByIDReply
	2,  // 51: UsersService.GetCompaniesByCountry:output_type -> GetCompaniesByCountryReply
	4,  // 52: UsersService.GetBrokerCommissionByID:output_type -> GetBrokerCommissionByIDReply
	29, // 53: UsersService.DecodeToken:output_type -> DecodeTokenReply
	35, // [35:54] is the sub-list for method output_type
	16, // [16:35] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_rpc_users_service_proto_init() }
func file_rpc_users_service_proto_init() {
	if File_rpc_users_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_users_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompaniesByCountryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompaniesByCountryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrokerCommissionByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrokerCommissionByIDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByIDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenWithUserReturnedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenWithUserReturnedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyUsersByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyByIDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyUsersByIDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsSuperAdminReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsBrokerGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsBrokerGroupWithManagedUserIdsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsPlantationGroupWithUserAndCompanyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsClientGroupWithUserAndCompanyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropdownUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_users_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_users_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_users_service_proto_goTypes,
		DependencyIndexes: file_rpc_users_service_proto_depIdxs,
		MessageInfos:      file_rpc_users_service_proto_msgTypes,
	}.Build()
	File_rpc_users_service_proto = out.File
	file_rpc_users_service_proto_rawDesc = nil
	file_rpc_users_service_proto_goTypes = nil
	file_rpc_users_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsersServiceClient interface {
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDReply, error)
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenReply, error)
	CheckTokenWithUserReturned(ctx context.Context, in *CheckTokenWithUserReturnedRequest, opts ...grpc.CallOption) (*CheckTokenWithUserReturnedReply, error)
	CheckTokenIsBrokerGroupWithManagedCompanyIds(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply, error)
	CheckTokenIsBrokerGroupWithManagedUserIds(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupWithManagedUserIdsReply, error)
	CheckTokenIsBrokerGroupWithManagedUsersDropdown(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply, error)
	CheckTokenIsBrokerGroup(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupReply, error)
	CheckTokenIsSuperAdmin(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsSuperAdminReply, error)
	CheckTokenIsPlantationGroupWithUserAndCompany(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsPlantationGroupWithUserAndCompanyReply, error)
	CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply, error)
	CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error)
	CheckTokenIsClientGroupWithUserAndCompany(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsClientGroupWithUserAndCompanyReply, error)
	CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply, error)
	CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error)
	GetCompanyByID(ctx context.Context, in *GetCompanyByIDRequest, opts ...grpc.CallOption) (*GetCompanyByIDReply, error)
	GetCompanyUsersByID(ctx context.Context, in *GetCompanyUsersByIDRequest, opts ...grpc.CallOption) (*GetCompanyUsersByIDReply, error)
	GetCompaniesByCountry(ctx context.Context, in *GetCompaniesByCountryRequest, opts ...grpc.CallOption) (*GetCompaniesByCountryReply, error)
	GetBrokerCommissionByID(ctx context.Context, in *GetBrokerCommissionByIDRequest, opts ...grpc.CallOption) (*GetBrokerCommissionByIDReply, error)
	DecodeToken(ctx context.Context, in *DecodeTokenRequest, opts ...grpc.CallOption) (*DecodeTokenReply, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDReply, error) {
	out := new(GetUserByIDReply)
	err := c.cc.Invoke(ctx, "/UsersService/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenReply, error) {
	out := new(CheckTokenReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenWithUserReturned(ctx context.Context, in *CheckTokenWithUserReturnedRequest, opts ...grpc.CallOption) (*CheckTokenWithUserReturnedReply, error) {
	out := new(CheckTokenWithUserReturnedReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenWithUserReturned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsBrokerGroupWithManagedCompanyIds(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply, error) {
	out := new(CheckTokenIsBrokerGroupWithManagedCompanyIdsReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsBrokerGroupWithManagedCompanyIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsBrokerGroupWithManagedUserIds(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupWithManagedUserIdsReply, error) {
	out := new(CheckTokenIsBrokerGroupWithManagedUserIdsReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsBrokerGroupWithManagedUserIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsBrokerGroupWithManagedUsersDropdown(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply, error) {
	out := new(CheckTokenIsBrokerGroupWithManagedUsersDropdownReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsBrokerGroupWithManagedUsersDropdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsBrokerGroup(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupReply, error) {
	out := new(CheckTokenIsBrokerGroupReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsBrokerGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsSuperAdmin(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsSuperAdminReply, error) {
	out := new(CheckTokenIsSuperAdminReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsSuperAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsPlantationGroupWithUserAndCompany(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsPlantationGroupWithUserAndCompanyReply, error) {
	out := new(CheckTokenIsPlantationGroupWithUserAndCompanyReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsPlantationGroupWithUserAndCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply, error) {
	out := new(CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error) {
	out := new(CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsClientGroupWithUserAndCompany(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsClientGroupWithUserAndCompanyReply, error) {
	out := new(CheckTokenIsClientGroupWithUserAndCompanyReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsClientGroupWithUserAndCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply, error) {
	out := new(CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error) {
	out := new(CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetCompanyByID(ctx context.Context, in *GetCompanyByIDRequest, opts ...grpc.CallOption) (*GetCompanyByIDReply, error) {
	out := new(GetCompanyByIDReply)
	err := c.cc.Invoke(ctx, "/UsersService/GetCompanyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetCompanyUsersByID(ctx context.Context, in *GetCompanyUsersByIDRequest, opts ...grpc.CallOption) (*GetCompanyUsersByIDReply, error) {
	out := new(GetCompanyUsersByIDReply)
	err := c.cc.Invoke(ctx, "/UsersService/GetCompanyUsersByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetCompaniesByCountry(ctx context.Context, in *GetCompaniesByCountryRequest, opts ...grpc.CallOption) (*GetCompaniesByCountryReply, error) {
	out := new(GetCompaniesByCountryReply)
	err := c.cc.Invoke(ctx, "/UsersService/GetCompaniesByCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetBrokerCommissionByID(ctx context.Context, in *GetBrokerCommissionByIDRequest, opts ...grpc.CallOption) (*GetBrokerCommissionByIDReply, error) {
	out := new(GetBrokerCommissionByIDReply)
	err := c.cc.Invoke(ctx, "/UsersService/GetBrokerCommissionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DecodeToken(ctx context.Context, in *DecodeTokenRequest, opts ...grpc.CallOption) (*DecodeTokenReply, error) {
	out := new(DecodeTokenReply)
	err := c.cc.Invoke(ctx, "/UsersService/DecodeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
type UsersServiceServer interface {
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDReply, error)
	CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenReply, error)
	CheckTokenWithUserReturned(context.Context, *CheckTokenWithUserReturnedRequest) (*CheckTokenWithUserReturnedReply, error)
	CheckTokenIsBrokerGroupWithManagedCompanyIds(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply, error)
	CheckTokenIsBrokerGroupWithManagedUserIds(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupWithManagedUserIdsReply, error)
	CheckTokenIsBrokerGroupWithManagedUsersDropdown(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply, error)
	CheckTokenIsBrokerGroup(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupReply, error)
	CheckTokenIsSuperAdmin(context.Context, *CheckTokenRequest) (*CheckTokenIsSuperAdminReply, error)
	CheckTokenIsPlantationGroupWithUserAndCompany(context.Context, *CheckTokenRequest) (*CheckTokenIsPlantationGroupWithUserAndCompanyReply, error)
	CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs(context.Context, *CheckTokenRequest) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply, error)
	CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown(context.Context, *CheckTokenRequest) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error)
	CheckTokenIsClientGroupWithUserAndCompany(context.Context, *CheckTokenRequest) (*CheckTokenIsClientGroupWithUserAndCompanyReply, error)
	CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs(context.Context, *CheckTokenRequest) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply, error)
	CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown(context.Context, *CheckTokenRequest) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error)
	GetCompanyByID(context.Context, *GetCompanyByIDRequest) (*GetCompanyByIDReply, error)
	GetCompanyUsersByID(context.Context, *GetCompanyUsersByIDRequest) (*GetCompanyUsersByIDReply, error)
	GetCompaniesByCountry(context.Context, *GetCompaniesByCountryRequest) (*GetCompaniesByCountryReply, error)
	GetBrokerCommissionByID(context.Context, *GetBrokerCommissionByIDRequest) (*GetBrokerCommissionByIDReply, error)
	DecodeToken(context.Context, *DecodeTokenRequest) (*DecodeTokenReply, error)
}

// UnimplementedUsersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (*UnimplementedUsersServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (*UnimplementedUsersServiceServer) CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (*UnimplementedUsersServiceServer) CheckTokenWithUserReturned(context.Context, *CheckTokenWithUserReturnedRequest) (*CheckTokenWithUserReturnedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenWithUserReturned not implemented")
}
func (*UnimplementedUsersServiceServer) CheckTokenIsBrokerGroupWithManagedCompanyIds(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsBrokerGroupWithManagedCompanyIds not implemented")
}
func (*UnimplementedUsersServiceServer) CheckTokenIsBrokerGroupWithManagedUserIds(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupWithManagedUserIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsBrokerGroupWithManagedUserIds not implemented")
}
func (*UnimplementedUsersServiceServer) CheckTokenIsBrokerGroupWithManagedUsersDropdown(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsBrokerGroupWithManagedUsersDropdown not implemented")
}
func (*UnimplementedUsersServiceServer) CheckTokenIsBrokerGroup(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsBrokerGroup not implemented")
}
func (*UnimplementedUsersServiceServer) CheckTokenIsSuperAdmin(context.Context, *CheckTokenRequest) (*CheckTokenIsSuperAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsSuperAdmin not implemented")
}
func (*UnimplementedUsersServiceServer) CheckTokenIsPlantationGroupWithUserAndCompany(context.Context, *CheckTokenRequest) (*CheckTokenIsPlantationGroupWithUserAndCompanyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsPlantationGroupWithUserAndCompany not implemented")
}
func (*UnimplementedUsersServiceServer) CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs(context.Context, *CheckTokenRequest) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs not implemented")
}
func (*UnimplementedUsersServiceServer) CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown(context.Context, *CheckTokenRequest) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown not implemented")
}
func (*UnimplementedUsersServiceServer) CheckTokenIsClientGroupWithUserAndCompany(context.Context, *CheckTokenRequest) (*CheckTokenIsClientGroupWithUserAndCompanyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsClientGroupWithUserAndCompany not implemented")
}
func (*UnimplementedUsersServiceServer) CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs(context.Context, *CheckTokenRequest) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs not implemented")
}
func (*UnimplementedUsersServiceServer) CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown(context.Context, *CheckTokenRequest) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown not implemented")
}
func (*UnimplementedUsersServiceServer) GetCompanyByID(context.Context, *GetCompanyByIDRequest) (*GetCompanyByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyByID not implemented")
}
func (*UnimplementedUsersServiceServer) GetCompanyUsersByID(context.Context, *GetCompanyUsersByIDRequest) (*GetCompanyUsersByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyUsersByID not implemented")
}
func (*UnimplementedUsersServiceServer) GetCompaniesByCountry(context.Context, *GetCompaniesByCountryRequest) (*GetCompaniesByCountryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompaniesByCountry not implemented")
}
func (*UnimplementedUsersServiceServer) GetBrokerCommissionByID(context.Context, *GetBrokerCommissionByIDRequest) (*GetBrokerCommissionByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerCommissionByID not implemented")
}
func (*UnimplementedUsersServiceServer) DecodeToken(context.Context, *DecodeTokenRequest) (*DecodeTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeToken not implemented")
}

func RegisterUsersServiceServer(s *grpc.Server, srv UsersServiceServer) {
	s.RegisterService(&_UsersService_serviceDesc, srv)
}

func _UsersService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenWithUserReturned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenWithUserReturnedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenWithUserReturned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenWithUserReturned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenWithUserReturned(ctx, req.(*CheckTokenWithUserReturnedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsBrokerGroupWithManagedCompanyIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroupWithManagedCompanyIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsBrokerGroupWithManagedCompanyIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroupWithManagedCompanyIds(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsBrokerGroupWithManagedUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroupWithManagedUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsBrokerGroupWithManagedUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroupWithManagedUserIds(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsBrokerGroupWithManagedUsersDropdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroupWithManagedUsersDropdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsBrokerGroupWithManagedUsersDropdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroupWithManagedUsersDropdown(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsBrokerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsBrokerGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroup(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsSuperAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsSuperAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsSuperAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsSuperAdmin(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsPlantationGroupWithUserAndCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsPlantationGroupWithUserAndCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsPlantationGroupWithUserAndCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsPlantationGroupWithUserAndCompany(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsClientGroupWithUserAndCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsClientGroupWithUserAndCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsClientGroupWithUserAndCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsClientGroupWithUserAndCompany(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetCompanyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetCompanyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetCompanyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetCompanyByID(ctx, req.(*GetCompanyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetCompanyUsersByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyUsersByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetCompanyUsersByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetCompanyUsersByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetCompanyUsersByID(ctx, req.(*GetCompanyUsersByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetCompaniesByCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompaniesByCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetCompaniesByCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetCompaniesByCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetCompaniesByCountry(ctx, req.(*GetCompaniesByCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetBrokerCommissionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrokerCommissionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetBrokerCommissionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetBrokerCommissionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetBrokerCommissionByID(ctx, req.(*GetBrokerCommissionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DecodeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DecodeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/DecodeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DecodeToken(ctx, req.(*DecodeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UsersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByID",
			Handler:    _UsersService_GetUserByID_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _UsersService_CheckToken_Handler,
		},
		{
			MethodName: "CheckTokenWithUserReturned",
			Handler:    _UsersService_CheckTokenWithUserReturned_Handler,
		},
		{
			MethodName: "CheckTokenIsBrokerGroupWithManagedCompanyIds",
			Handler:    _UsersService_CheckTokenIsBrokerGroupWithManagedCompanyIds_Handler,
		},
		{
			MethodName: "CheckTokenIsBrokerGroupWithManagedUserIds",
			Handler:    _UsersService_CheckTokenIsBrokerGroupWithManagedUserIds_Handler,
		},
		{
			MethodName: "CheckTokenIsBrokerGroupWithManagedUsersDropdown",
			Handler:    _UsersService_CheckTokenIsBrokerGroupWithManagedUsersDropdown_Handler,
		},
		{
			MethodName: "CheckTokenIsBrokerGroup",
			Handler:    _UsersService_CheckTokenIsBrokerGroup_Handler,
		},
		{
			MethodName: "CheckTokenIsSuperAdmin",
			Handler:    _UsersService_CheckTokenIsSuperAdmin_Handler,
		},
		{
			MethodName: "CheckTokenIsPlantationGroupWithUserAndCompany",
			Handler:    _UsersService_CheckTokenIsPlantationGroupWithUserAndCompany_Handler,
		},
		{
			MethodName: "CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs",
			Handler:    _UsersService_CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs_Handler,
		},
		{
			MethodName: "CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown",
			Handler:    _UsersService_CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown_Handler,
		},
		{
			MethodName: "CheckTokenIsClientGroupWithUserAndCompany",
			Handler:    _UsersService_CheckTokenIsClientGroupWithUserAndCompany_Handler,
		},
		{
			MethodName: "CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs",
			Handler:    _UsersService_CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs_Handler,
		},
		{
			MethodName: "CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown",
			Handler:    _UsersService_CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown_Handler,
		},
		{
			MethodName: "GetCompanyByID",
			Handler:    _UsersService_GetCompanyByID_Handler,
		},
		{
			MethodName: "GetCompanyUsersByID",
			Handler:    _UsersService_GetCompanyUsersByID_Handler,
		},
		{
			MethodName: "GetCompaniesByCountry",
			Handler:    _UsersService_GetCompaniesByCountry_Handler,
		},
		{
			MethodName: "GetBrokerCommissionByID",
			Handler:    _UsersService_GetBrokerCommissionByID_Handler,
		},
		{
			MethodName: "DecodeToken",
			Handler:    _UsersService_DecodeToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/users-service.proto",
}
