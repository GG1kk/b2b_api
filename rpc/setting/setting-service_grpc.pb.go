// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/setting-service.proto

package setting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SettingsService_GetPlantationIdsWithDisplayEnabled_FullMethodName = "/SettingsService/GetPlantationIdsWithDisplayEnabled"
	SettingsService_GetActiveByDayPlantations_FullMethodName          = "/SettingsService/GetActiveByDayPlantations"
	SettingsService_GetCargoByID_FullMethodName                       = "/SettingsService/GetCargoByID"
	SettingsService_GetBasicSettings_FullMethodName                   = "/SettingsService/GetBasicSettings"
	SettingsService_GetCountryCode_FullMethodName                     = "/SettingsService/GetCountryCode"
	SettingsService_GetCountryNameByID_FullMethodName                 = "/SettingsService/GetCountryNameByID"
	SettingsService_GetPlantationVisibleByCompanyID_FullMethodName    = "/SettingsService/GetPlantationVisibleByCompanyID"
)

// SettingsServiceClient is the client API for SettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettingsServiceClient interface {
	GetPlantationIdsWithDisplayEnabled(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPlantationIdsWithDisplayEnabledReply, error)
	GetActiveByDayPlantations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPlantationIdsWithDisplayEnabledReply, error)
	GetCargoByID(ctx context.Context, in *GetCargoByIDRequest, opts ...grpc.CallOption) (*GetCargoByIDReply, error)
	GetBasicSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetBasicSettingsReply, error)
	GetCountryCode(ctx context.Context, in *GetCountryCodeRequest, opts ...grpc.CallOption) (*GetCountryCodeReply, error)
	GetCountryNameByID(ctx context.Context, in *GetCountryNameByIDRequest, opts ...grpc.CallOption) (*GetCountryNameByIDResponse, error)
	GetPlantationVisibleByCompanyID(ctx context.Context, in *GetPlantationVisibleByCompanyIDRequest, opts ...grpc.CallOption) (*GetPlantationVisibleByCompanyIDResponse, error)
}

type settingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingsServiceClient(cc grpc.ClientConnInterface) SettingsServiceClient {
	return &settingsServiceClient{cc}
}

func (c *settingsServiceClient) GetPlantationIdsWithDisplayEnabled(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPlantationIdsWithDisplayEnabledReply, error) {
	out := new(GetPlantationIdsWithDisplayEnabledReply)
	err := c.cc.Invoke(ctx, SettingsService_GetPlantationIdsWithDisplayEnabled_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetActiveByDayPlantations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPlantationIdsWithDisplayEnabledReply, error) {
	out := new(GetPlantationIdsWithDisplayEnabledReply)
	err := c.cc.Invoke(ctx, SettingsService_GetActiveByDayPlantations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetCargoByID(ctx context.Context, in *GetCargoByIDRequest, opts ...grpc.CallOption) (*GetCargoByIDReply, error) {
	out := new(GetCargoByIDReply)
	err := c.cc.Invoke(ctx, SettingsService_GetCargoByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetBasicSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetBasicSettingsReply, error) {
	out := new(GetBasicSettingsReply)
	err := c.cc.Invoke(ctx, SettingsService_GetBasicSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetCountryCode(ctx context.Context, in *GetCountryCodeRequest, opts ...grpc.CallOption) (*GetCountryCodeReply, error) {
	out := new(GetCountryCodeReply)
	err := c.cc.Invoke(ctx, SettingsService_GetCountryCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetCountryNameByID(ctx context.Context, in *GetCountryNameByIDRequest, opts ...grpc.CallOption) (*GetCountryNameByIDResponse, error) {
	out := new(GetCountryNameByIDResponse)
	err := c.cc.Invoke(ctx, SettingsService_GetCountryNameByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetPlantationVisibleByCompanyID(ctx context.Context, in *GetPlantationVisibleByCompanyIDRequest, opts ...grpc.CallOption) (*GetPlantationVisibleByCompanyIDResponse, error) {
	out := new(GetPlantationVisibleByCompanyIDResponse)
	err := c.cc.Invoke(ctx, SettingsService_GetPlantationVisibleByCompanyID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingsServiceServer is the server API for SettingsService service.
// All implementations must embed UnimplementedSettingsServiceServer
// for forward compatibility
type SettingsServiceServer interface {
	GetPlantationIdsWithDisplayEnabled(context.Context, *Empty) (*GetPlantationIdsWithDisplayEnabledReply, error)
	GetActiveByDayPlantations(context.Context, *Empty) (*GetPlantationIdsWithDisplayEnabledReply, error)
	GetCargoByID(context.Context, *GetCargoByIDRequest) (*GetCargoByIDReply, error)
	GetBasicSettings(context.Context, *Empty) (*GetBasicSettingsReply, error)
	GetCountryCode(context.Context, *GetCountryCodeRequest) (*GetCountryCodeReply, error)
	GetCountryNameByID(context.Context, *GetCountryNameByIDRequest) (*GetCountryNameByIDResponse, error)
	GetPlantationVisibleByCompanyID(context.Context, *GetPlantationVisibleByCompanyIDRequest) (*GetPlantationVisibleByCompanyIDResponse, error)
	mustEmbedUnimplementedSettingsServiceServer()
}

// UnimplementedSettingsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSettingsServiceServer struct {
}

func (UnimplementedSettingsServiceServer) GetPlantationIdsWithDisplayEnabled(context.Context, *Empty) (*GetPlantationIdsWithDisplayEnabledReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlantationIdsWithDisplayEnabled not implemented")
}
func (UnimplementedSettingsServiceServer) GetActiveByDayPlantations(context.Context, *Empty) (*GetPlantationIdsWithDisplayEnabledReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveByDayPlantations not implemented")
}
func (UnimplementedSettingsServiceServer) GetCargoByID(context.Context, *GetCargoByIDRequest) (*GetCargoByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCargoByID not implemented")
}
func (UnimplementedSettingsServiceServer) GetBasicSettings(context.Context, *Empty) (*GetBasicSettingsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicSettings not implemented")
}
func (UnimplementedSettingsServiceServer) GetCountryCode(context.Context, *GetCountryCodeRequest) (*GetCountryCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountryCode not implemented")
}
func (UnimplementedSettingsServiceServer) GetCountryNameByID(context.Context, *GetCountryNameByIDRequest) (*GetCountryNameByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountryNameByID not implemented")
}
func (UnimplementedSettingsServiceServer) GetPlantationVisibleByCompanyID(context.Context, *GetPlantationVisibleByCompanyIDRequest) (*GetPlantationVisibleByCompanyIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlantationVisibleByCompanyID not implemented")
}
func (UnimplementedSettingsServiceServer) mustEmbedUnimplementedSettingsServiceServer() {}

// UnsafeSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingsServiceServer will
// result in compilation errors.
type UnsafeSettingsServiceServer interface {
	mustEmbedUnimplementedSettingsServiceServer()
}

func RegisterSettingsServiceServer(s grpc.ServiceRegistrar, srv SettingsServiceServer) {
	s.RegisterService(&SettingsService_ServiceDesc, srv)
}

func _SettingsService_GetPlantationIdsWithDisplayEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetPlantationIdsWithDisplayEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetPlantationIdsWithDisplayEnabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetPlantationIdsWithDisplayEnabled(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetActiveByDayPlantations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetActiveByDayPlantations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetActiveByDayPlantations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetActiveByDayPlantations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetCargoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCargoByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetCargoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetCargoByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetCargoByID(ctx, req.(*GetCargoByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetBasicSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetBasicSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetBasicSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetBasicSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetCountryCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetCountryCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetCountryCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetCountryCode(ctx, req.(*GetCountryCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetCountryNameByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryNameByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetCountryNameByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetCountryNameByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetCountryNameByID(ctx, req.(*GetCountryNameByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetPlantationVisibleByCompanyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlantationVisibleByCompanyIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetPlantationVisibleByCompanyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetPlantationVisibleByCompanyID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetPlantationVisibleByCompanyID(ctx, req.(*GetPlantationVisibleByCompanyIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SettingsService_ServiceDesc is the grpc.ServiceDesc for SettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SettingsService",
	HandlerType: (*SettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlantationIdsWithDisplayEnabled",
			Handler:    _SettingsService_GetPlantationIdsWithDisplayEnabled_Handler,
		},
		{
			MethodName: "GetActiveByDayPlantations",
			Handler:    _SettingsService_GetActiveByDayPlantations_Handler,
		},
		{
			MethodName: "GetCargoByID",
			Handler:    _SettingsService_GetCargoByID_Handler,
		},
		{
			MethodName: "GetBasicSettings",
			Handler:    _SettingsService_GetBasicSettings_Handler,
		},
		{
			MethodName: "GetCountryCode",
			Handler:    _SettingsService_GetCountryCode_Handler,
		},
		{
			MethodName: "GetCountryNameByID",
			Handler:    _SettingsService_GetCountryNameByID_Handler,
		},
		{
			MethodName: "GetPlantationVisibleByCompanyID",
			Handler:    _SettingsService_GetPlantationVisibleByCompanyID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/setting-service.proto",
}
