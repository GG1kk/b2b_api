// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: rpc/wallet-service.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StartSimplePayOrderPayoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID   string `protobuf:"bytes,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	Email       string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Amount      int32  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	RedirectURL string `protobuf:"bytes,4,opt,name=redirectURL,proto3" json:"redirectURL,omitempty"`
	OrderID     int32  `protobuf:"varint,5,opt,name=orderID,proto3" json:"orderID,omitempty"`
}

func (x *StartSimplePayOrderPayoutRequest) Reset() {
	*x = StartSimplePayOrderPayoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wallet_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSimplePayOrderPayoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSimplePayOrderPayoutRequest) ProtoMessage() {}

func (x *StartSimplePayOrderPayoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wallet_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSimplePayOrderPayoutRequest.ProtoReflect.Descriptor instead.
func (*StartSimplePayOrderPayoutRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wallet_service_proto_rawDescGZIP(), []int{0}
}

func (x *StartSimplePayOrderPayoutRequest) GetCompanyID() string {
	if x != nil {
		return x.CompanyID
	}
	return ""
}

func (x *StartSimplePayOrderPayoutRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *StartSimplePayOrderPayoutRequest) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *StartSimplePayOrderPayoutRequest) GetRedirectURL() string {
	if x != nil {
		return x.RedirectURL
	}
	return ""
}

func (x *StartSimplePayOrderPayoutRequest) GetOrderID() int32 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

type StartSimplePayOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayoutURL string `protobuf:"bytes,1,opt,name=payoutURL,proto3" json:"payoutURL,omitempty"`
}

func (x *StartSimplePayOrderResponse) Reset() {
	*x = StartSimplePayOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wallet_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSimplePayOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSimplePayOrderResponse) ProtoMessage() {}

func (x *StartSimplePayOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wallet_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSimplePayOrderResponse.ProtoReflect.Descriptor instead.
func (*StartSimplePayOrderResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wallet_service_proto_rawDescGZIP(), []int{1}
}

func (x *StartSimplePayOrderResponse) GetPayoutURL() string {
	if x != nil {
		return x.PayoutURL
	}
	return ""
}

type GetWalletAmountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyIds []string `protobuf:"bytes,1,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *GetWalletAmountsRequest) Reset() {
	*x = GetWalletAmountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wallet_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletAmountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletAmountsRequest) ProtoMessage() {}

func (x *GetWalletAmountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wallet_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletAmountsRequest.ProtoReflect.Descriptor instead.
func (*GetWalletAmountsRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wallet_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetWalletAmountsRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type GetWalletAmountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyWallets map[string]int32 `protobuf:"bytes,1,rep,name=companyWallets,proto3" json:"companyWallets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetWalletAmountsResponse) Reset() {
	*x = GetWalletAmountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wallet_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletAmountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletAmountsResponse) ProtoMessage() {}

func (x *GetWalletAmountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wallet_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletAmountsResponse.ProtoReflect.Descriptor instead.
func (*GetWalletAmountsResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wallet_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetWalletAmountsResponse) GetCompanyWallets() map[string]int32 {
	if x != nil {
		return x.CompanyWallets
	}
	return nil
}

type GetWalletAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *GetWalletAmountRequest) Reset() {
	*x = GetWalletAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wallet_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletAmountRequest) ProtoMessage() {}

func (x *GetWalletAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wallet_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletAmountRequest.ProtoReflect.Descriptor instead.
func (*GetWalletAmountRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wallet_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetWalletAmountRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

type GetWalletAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyWallet int32 `protobuf:"varint,1,opt,name=companyWallet,proto3" json:"companyWallet,omitempty"`
}

func (x *GetWalletAmountResponse) Reset() {
	*x = GetWalletAmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wallet_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletAmountResponse) ProtoMessage() {}

func (x *GetWalletAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wallet_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletAmountResponse.ProtoReflect.Descriptor instead.
func (*GetWalletAmountResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wallet_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetWalletAmountResponse) GetCompanyWallet() int32 {
	if x != nil {
		return x.CompanyWallet
	}
	return 0
}

type SendMoneyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderID   string `protobuf:"bytes,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	ReceiverID string `protobuf:"bytes,2,opt,name=receiverID,proto3" json:"receiverID,omitempty"`
	Amount     int32  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *SendMoneyRequest) Reset() {
	*x = SendMoneyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wallet_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMoneyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMoneyRequest) ProtoMessage() {}

func (x *SendMoneyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wallet_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMoneyRequest.ProtoReflect.Descriptor instead.
func (*SendMoneyRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wallet_service_proto_rawDescGZIP(), []int{6}
}

func (x *SendMoneyRequest) GetSenderID() string {
	if x != nil {
		return x.SenderID
	}
	return ""
}

func (x *SendMoneyRequest) GetReceiverID() string {
	if x != nil {
		return x.ReceiverID
	}
	return ""
}

func (x *SendMoneyRequest) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type SendMoneyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendMoneyResponse) Reset() {
	*x = SendMoneyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wallet_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMoneyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMoneyResponse) ProtoMessage() {}

func (x *SendMoneyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wallet_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMoneyResponse.ProtoReflect.Descriptor instead.
func (*SendMoneyResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wallet_service_proto_rawDescGZIP(), []int{7}
}

type PayoutOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID      string           `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	PreInvoiceID string           `protobuf:"bytes,2,opt,name=preInvoiceID,proto3" json:"preInvoiceID,omitempty"`
	ClientID     string           `protobuf:"bytes,3,opt,name=clientID,proto3" json:"clientID,omitempty"`
	Amounts      map[string]int32 `protobuf:"bytes,5,rep,name=amounts,proto3" json:"amounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PayoutOrderRequest) Reset() {
	*x = PayoutOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wallet_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutOrderRequest) ProtoMessage() {}

func (x *PayoutOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wallet_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutOrderRequest.ProtoReflect.Descriptor instead.
func (*PayoutOrderRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wallet_service_proto_rawDescGZIP(), []int{8}
}

func (x *PayoutOrderRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *PayoutOrderRequest) GetPreInvoiceID() string {
	if x != nil {
		return x.PreInvoiceID
	}
	return ""
}

func (x *PayoutOrderRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *PayoutOrderRequest) GetAmounts() map[string]int32 {
	if x != nil {
		return x.Amounts
	}
	return nil
}

type PayoutOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PayoutOrderResponse) Reset() {
	*x = PayoutOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wallet_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayoutOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayoutOrderResponse) ProtoMessage() {}

func (x *PayoutOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wallet_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayoutOrderResponse.ProtoReflect.Descriptor instead.
func (*PayoutOrderResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wallet_service_proto_rawDescGZIP(), []int{9}
}

type CompensateInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID      string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	PreInvoiceID string `protobuf:"bytes,2,opt,name=preInvoiceID,proto3" json:"preInvoiceID,omitempty"`
	InvoiceID    string `protobuf:"bytes,3,opt,name=invoiceID,proto3" json:"invoiceID,omitempty"`
	ClientID     string `protobuf:"bytes,4,opt,name=clientID,proto3" json:"clientID,omitempty"`
	Amount       int32  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CompensateInvoiceRequest) Reset() {
	*x = CompensateInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wallet_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompensateInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompensateInvoiceRequest) ProtoMessage() {}

func (x *CompensateInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wallet_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompensateInvoiceRequest.ProtoReflect.Descriptor instead.
func (*CompensateInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wallet_service_proto_rawDescGZIP(), []int{10}
}

func (x *CompensateInvoiceRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *CompensateInvoiceRequest) GetPreInvoiceID() string {
	if x != nil {
		return x.PreInvoiceID
	}
	return ""
}

func (x *CompensateInvoiceRequest) GetInvoiceID() string {
	if x != nil {
		return x.InvoiceID
	}
	return ""
}

func (x *CompensateInvoiceRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CompensateInvoiceRequest) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type CompensateInvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompensateInvoiceResponse) Reset() {
	*x = CompensateInvoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wallet_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompensateInvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompensateInvoiceResponse) ProtoMessage() {}

func (x *CompensateInvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wallet_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompensateInvoiceResponse.ProtoReflect.Descriptor instead.
func (*CompensateInvoiceResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wallet_service_proto_rawDescGZIP(), []int{11}
}

type PerformRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID      string `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	PreInvoiceID string `protobuf:"bytes,2,opt,name=preInvoiceID,proto3" json:"preInvoiceID,omitempty"`
	InvoiceID    string `protobuf:"bytes,3,opt,name=invoiceID,proto3" json:"invoiceID,omitempty"`
	ComplaintID  string `protobuf:"bytes,4,opt,name=complaintID,proto3" json:"complaintID,omitempty"`
	PlantationID string `protobuf:"bytes,5,opt,name=plantationID,proto3" json:"plantationID,omitempty"`
	ClientID     string `protobuf:"bytes,6,opt,name=clientID,proto3" json:"clientID,omitempty"`
	Amount       int32  `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PerformRefundRequest) Reset() {
	*x = PerformRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wallet_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformRefundRequest) ProtoMessage() {}

func (x *PerformRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wallet_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformRefundRequest.ProtoReflect.Descriptor instead.
func (*PerformRefundRequest) Descriptor() ([]byte, []int) {
	return file_rpc_wallet_service_proto_rawDescGZIP(), []int{12}
}

func (x *PerformRefundRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *PerformRefundRequest) GetPreInvoiceID() string {
	if x != nil {
		return x.PreInvoiceID
	}
	return ""
}

func (x *PerformRefundRequest) GetInvoiceID() string {
	if x != nil {
		return x.InvoiceID
	}
	return ""
}

func (x *PerformRefundRequest) GetComplaintID() string {
	if x != nil {
		return x.ComplaintID
	}
	return ""
}

func (x *PerformRefundRequest) GetPlantationID() string {
	if x != nil {
		return x.PlantationID
	}
	return ""
}

func (x *PerformRefundRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *PerformRefundRequest) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type PerformRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PerformRefundResponse) Reset() {
	*x = PerformRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_wallet_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformRefundResponse) ProtoMessage() {}

func (x *PerformRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_wallet_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformRefundResponse.ProtoReflect.Descriptor instead.
func (*PerformRefundResponse) Descriptor() ([]byte, []int) {
	return file_rpc_wallet_service_proto_rawDescGZIP(), []int{13}
}

var File_rpc_wallet_service_proto protoreflect.FileDescriptor

var file_rpc_wallet_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x72, 0x70, 0x63, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x20, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x3b, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x55, 0x52, 0x4c, 0x22, 0x3a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73,
	0x22, 0xb4, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x22, 0x3f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x22, 0x66, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6,
	0x01, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x3a, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa,
	0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x14, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x84, 0x04, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x11, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x50, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e,
	0x73, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x15, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x72, 0x70, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_wallet_service_proto_rawDescOnce sync.Once
	file_rpc_wallet_service_proto_rawDescData = file_rpc_wallet_service_proto_rawDesc
)

func file_rpc_wallet_service_proto_rawDescGZIP() []byte {
	file_rpc_wallet_service_proto_rawDescOnce.Do(func() {
		file_rpc_wallet_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_wallet_service_proto_rawDescData)
	})
	return file_rpc_wallet_service_proto_rawDescData
}

var file_rpc_wallet_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_rpc_wallet_service_proto_goTypes = []interface{}{
	(*StartSimplePayOrderPayoutRequest)(nil), // 0: StartSimplePayOrderPayoutRequest
	(*StartSimplePayOrderResponse)(nil),      // 1: StartSimplePayOrderResponse
	(*GetWalletAmountsRequest)(nil),          // 2: GetWalletAmountsRequest
	(*GetWalletAmountsResponse)(nil),         // 3: GetWalletAmountsResponse
	(*GetWalletAmountRequest)(nil),           // 4: GetWalletAmountRequest
	(*GetWalletAmountResponse)(nil),          // 5: GetWalletAmountResponse
	(*SendMoneyRequest)(nil),                 // 6: SendMoneyRequest
	(*SendMoneyResponse)(nil),                // 7: SendMoneyResponse
	(*PayoutOrderRequest)(nil),               // 8: PayoutOrderRequest
	(*PayoutOrderResponse)(nil),              // 9: PayoutOrderResponse
	(*CompensateInvoiceRequest)(nil),         // 10: CompensateInvoiceRequest
	(*CompensateInvoiceResponse)(nil),        // 11: CompensateInvoiceResponse
	(*PerformRefundRequest)(nil),             // 12: PerformRefundRequest
	(*PerformRefundResponse)(nil),            // 13: PerformRefundResponse
	nil,                                      // 14: GetWalletAmountsResponse.CompanyWalletsEntry
	nil,                                      // 15: PayoutOrderRequest.AmountsEntry
}
var file_rpc_wallet_service_proto_depIdxs = []int32{
	14, // 0: GetWalletAmountsResponse.companyWallets:type_name -> GetWalletAmountsResponse.CompanyWalletsEntry
	15, // 1: PayoutOrderRequest.amounts:type_name -> PayoutOrderRequest.AmountsEntry
	2,  // 2: WalletService.GetWalletAmounts:input_type -> GetWalletAmountsRequest
	4,  // 3: WalletService.GetWalletAmount:input_type -> GetWalletAmountRequest
	6,  // 4: WalletService.SendMoney:input_type -> SendMoneyRequest
	8,  // 5: WalletService.PayoutOrder:input_type -> PayoutOrderRequest
	10, // 6: WalletService.CompensateInvoice:input_type -> CompensateInvoiceRequest
	12, // 7: WalletService.PerformRefund:input_type -> PerformRefundRequest
	0,  // 8: WalletService.StartSimplePayOrderPayout:input_type -> StartSimplePayOrderPayoutRequest
	3,  // 9: WalletService.GetWalletAmounts:output_type -> GetWalletAmountsResponse
	5,  // 10: WalletService.GetWalletAmount:output_type -> GetWalletAmountResponse
	7,  // 11: WalletService.SendMoney:output_type -> SendMoneyResponse
	9,  // 12: WalletService.PayoutOrder:output_type -> PayoutOrderResponse
	11, // 13: WalletService.CompensateInvoice:output_type -> CompensateInvoiceResponse
	13, // 14: WalletService.PerformRefund:output_type -> PerformRefundResponse
	1,  // 15: WalletService.StartSimplePayOrderPayout:output_type -> StartSimplePayOrderResponse
	9,  // [9:16] is the sub-list for method output_type
	2,  // [2:9] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_rpc_wallet_service_proto_init() }
func file_rpc_wallet_service_proto_init() {
	if File_rpc_wallet_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_wallet_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSimplePayOrderPayoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wallet_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSimplePayOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wallet_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletAmountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wallet_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletAmountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wallet_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wallet_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletAmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wallet_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMoneyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wallet_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMoneyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wallet_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wallet_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayoutOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wallet_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompensateInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wallet_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompensateInvoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wallet_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_wallet_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_wallet_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_wallet_service_proto_goTypes,
		DependencyIndexes: file_rpc_wallet_service_proto_depIdxs,
		MessageInfos:      file_rpc_wallet_service_proto_msgTypes,
	}.Build()
	File_rpc_wallet_service_proto = out.File
	file_rpc_wallet_service_proto_rawDesc = nil
	file_rpc_wallet_service_proto_goTypes = nil
	file_rpc_wallet_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletServiceClient interface {
	GetWalletAmounts(ctx context.Context, in *GetWalletAmountsRequest, opts ...grpc.CallOption) (*GetWalletAmountsResponse, error)
	GetWalletAmount(ctx context.Context, in *GetWalletAmountRequest, opts ...grpc.CallOption) (*GetWalletAmountResponse, error)
	SendMoney(ctx context.Context, in *SendMoneyRequest, opts ...grpc.CallOption) (*SendMoneyResponse, error)
	PayoutOrder(ctx context.Context, in *PayoutOrderRequest, opts ...grpc.CallOption) (*PayoutOrderResponse, error)
	CompensateInvoice(ctx context.Context, in *CompensateInvoiceRequest, opts ...grpc.CallOption) (*CompensateInvoiceResponse, error)
	PerformRefund(ctx context.Context, in *PerformRefundRequest, opts ...grpc.CallOption) (*PerformRefundResponse, error)
	StartSimplePayOrderPayout(ctx context.Context, in *StartSimplePayOrderPayoutRequest, opts ...grpc.CallOption) (*StartSimplePayOrderResponse, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) GetWalletAmounts(ctx context.Context, in *GetWalletAmountsRequest, opts ...grpc.CallOption) (*GetWalletAmountsResponse, error) {
	out := new(GetWalletAmountsResponse)
	err := c.cc.Invoke(ctx, "/WalletService/GetWalletAmounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWalletAmount(ctx context.Context, in *GetWalletAmountRequest, opts ...grpc.CallOption) (*GetWalletAmountResponse, error) {
	out := new(GetWalletAmountResponse)
	err := c.cc.Invoke(ctx, "/WalletService/GetWalletAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SendMoney(ctx context.Context, in *SendMoneyRequest, opts ...grpc.CallOption) (*SendMoneyResponse, error) {
	out := new(SendMoneyResponse)
	err := c.cc.Invoke(ctx, "/WalletService/SendMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PayoutOrder(ctx context.Context, in *PayoutOrderRequest, opts ...grpc.CallOption) (*PayoutOrderResponse, error) {
	out := new(PayoutOrderResponse)
	err := c.cc.Invoke(ctx, "/WalletService/PayoutOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CompensateInvoice(ctx context.Context, in *CompensateInvoiceRequest, opts ...grpc.CallOption) (*CompensateInvoiceResponse, error) {
	out := new(CompensateInvoiceResponse)
	err := c.cc.Invoke(ctx, "/WalletService/CompensateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PerformRefund(ctx context.Context, in *PerformRefundRequest, opts ...grpc.CallOption) (*PerformRefundResponse, error) {
	out := new(PerformRefundResponse)
	err := c.cc.Invoke(ctx, "/WalletService/PerformRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) StartSimplePayOrderPayout(ctx context.Context, in *StartSimplePayOrderPayoutRequest, opts ...grpc.CallOption) (*StartSimplePayOrderResponse, error) {
	out := new(StartSimplePayOrderResponse)
	err := c.cc.Invoke(ctx, "/WalletService/StartSimplePayOrderPayout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
type WalletServiceServer interface {
	GetWalletAmounts(context.Context, *GetWalletAmountsRequest) (*GetWalletAmountsResponse, error)
	GetWalletAmount(context.Context, *GetWalletAmountRequest) (*GetWalletAmountResponse, error)
	SendMoney(context.Context, *SendMoneyRequest) (*SendMoneyResponse, error)
	PayoutOrder(context.Context, *PayoutOrderRequest) (*PayoutOrderResponse, error)
	CompensateInvoice(context.Context, *CompensateInvoiceRequest) (*CompensateInvoiceResponse, error)
	PerformRefund(context.Context, *PerformRefundRequest) (*PerformRefundResponse, error)
	StartSimplePayOrderPayout(context.Context, *StartSimplePayOrderPayoutRequest) (*StartSimplePayOrderResponse, error)
}

// UnimplementedWalletServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWalletServiceServer struct {
}

func (*UnimplementedWalletServiceServer) GetWalletAmounts(context.Context, *GetWalletAmountsRequest) (*GetWalletAmountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletAmounts not implemented")
}
func (*UnimplementedWalletServiceServer) GetWalletAmount(context.Context, *GetWalletAmountRequest) (*GetWalletAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletAmount not implemented")
}
func (*UnimplementedWalletServiceServer) SendMoney(context.Context, *SendMoneyRequest) (*SendMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMoney not implemented")
}
func (*UnimplementedWalletServiceServer) PayoutOrder(context.Context, *PayoutOrderRequest) (*PayoutOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayoutOrder not implemented")
}
func (*UnimplementedWalletServiceServer) CompensateInvoice(context.Context, *CompensateInvoiceRequest) (*CompensateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompensateInvoice not implemented")
}
func (*UnimplementedWalletServiceServer) PerformRefund(context.Context, *PerformRefundRequest) (*PerformRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformRefund not implemented")
}
func (*UnimplementedWalletServiceServer) StartSimplePayOrderPayout(context.Context, *StartSimplePayOrderPayoutRequest) (*StartSimplePayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSimplePayOrderPayout not implemented")
}

func RegisterWalletServiceServer(s *grpc.Server, srv WalletServiceServer) {
	s.RegisterService(&_WalletService_serviceDesc, srv)
}

func _WalletService_GetWalletAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletAmountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletService/GetWalletAmounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletAmounts(ctx, req.(*GetWalletAmountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWalletAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletService/GetWalletAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletAmount(ctx, req.(*GetWalletAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SendMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SendMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletService/SendMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SendMoney(ctx, req.(*SendMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PayoutOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayoutOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PayoutOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletService/PayoutOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PayoutOrder(ctx, req.(*PayoutOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CompensateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompensateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CompensateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletService/CompensateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CompensateInvoice(ctx, req.(*CompensateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PerformRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PerformRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletService/PerformRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PerformRefund(ctx, req.(*PerformRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_StartSimplePayOrderPayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSimplePayOrderPayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).StartSimplePayOrderPayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletService/StartSimplePayOrderPayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).StartSimplePayOrderPayout(ctx, req.(*StartSimplePayOrderPayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWalletAmounts",
			Handler:    _WalletService_GetWalletAmounts_Handler,
		},
		{
			MethodName: "GetWalletAmount",
			Handler:    _WalletService_GetWalletAmount_Handler,
		},
		{
			MethodName: "SendMoney",
			Handler:    _WalletService_SendMoney_Handler,
		},
		{
			MethodName: "PayoutOrder",
			Handler:    _WalletService_PayoutOrder_Handler,
		},
		{
			MethodName: "CompensateInvoice",
			Handler:    _WalletService_CompensateInvoice_Handler,
		},
		{
			MethodName: "PerformRefund",
			Handler:    _WalletService_PerformRefund_Handler,
		},
		{
			MethodName: "StartSimplePayOrderPayout",
			Handler:    _WalletService_StartSimplePayOrderPayout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/wallet-service.proto",
}
