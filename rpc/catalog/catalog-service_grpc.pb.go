// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: proto/catalog-service.proto

package catalog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogServiceClient interface {
	GetCatalogProductByID(ctx context.Context, in *GetCatalogProductByIDRequest, opts ...grpc.CallOption) (*GetCatalogProductByIDReply, error)
	GetSizeInfo(ctx context.Context, in *GetSizeInfoRequest, opts ...grpc.CallOption) (*GetSizeInfoReply, error)
	GetCurrentSeasonByPlantationID(ctx context.Context, in *GetCurrentSeasonByPlantationIDRequest, opts ...grpc.CallOption) (*GetCurrentSeasonByPlantationIDReply, error)
	GetVarietyName(ctx context.Context, in *GetVarietyNameRequest, opts ...grpc.CallOption) (*GetVarietyNameResponse, error)
	GetProductName(ctx context.Context, in *GetProductNameRequest, opts ...grpc.CallOption) (*GetProductNameResponse, error)
	// new
	GetProductAngVarietyNameWithImageURLAndColorId(ctx context.Context, in *GetProductAngVarietyNameWithImageURLAndColorIdRequest, opts ...grpc.CallOption) (*GetProductAngVarietyNameWithImageURLAndColorIdResponse, error)
}

type catalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogServiceClient(cc grpc.ClientConnInterface) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) GetCatalogProductByID(ctx context.Context, in *GetCatalogProductByIDRequest, opts ...grpc.CallOption) (*GetCatalogProductByIDReply, error) {
	out := new(GetCatalogProductByIDReply)
	err := c.cc.Invoke(ctx, "/CatalogService/GetCatalogProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetSizeInfo(ctx context.Context, in *GetSizeInfoRequest, opts ...grpc.CallOption) (*GetSizeInfoReply, error) {
	out := new(GetSizeInfoReply)
	err := c.cc.Invoke(ctx, "/CatalogService/GetSizeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetCurrentSeasonByPlantationID(ctx context.Context, in *GetCurrentSeasonByPlantationIDRequest, opts ...grpc.CallOption) (*GetCurrentSeasonByPlantationIDReply, error) {
	out := new(GetCurrentSeasonByPlantationIDReply)
	err := c.cc.Invoke(ctx, "/CatalogService/GetCurrentSeasonByPlantationID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetVarietyName(ctx context.Context, in *GetVarietyNameRequest, opts ...grpc.CallOption) (*GetVarietyNameResponse, error) {
	out := new(GetVarietyNameResponse)
	err := c.cc.Invoke(ctx, "/CatalogService/GetVarietyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetProductName(ctx context.Context, in *GetProductNameRequest, opts ...grpc.CallOption) (*GetProductNameResponse, error) {
	out := new(GetProductNameResponse)
	err := c.cc.Invoke(ctx, "/CatalogService/GetProductName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetProductAngVarietyNameWithImageURLAndColorId(ctx context.Context, in *GetProductAngVarietyNameWithImageURLAndColorIdRequest, opts ...grpc.CallOption) (*GetProductAngVarietyNameWithImageURLAndColorIdResponse, error) {
	out := new(GetProductAngVarietyNameWithImageURLAndColorIdResponse)
	err := c.cc.Invoke(ctx, "/CatalogService/GetProductAngVarietyNameWithImageURLAndColorId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServiceServer is the server API for CatalogService service.
// All implementations must embed UnimplementedCatalogServiceServer
// for forward compatibility
type CatalogServiceServer interface {
	GetCatalogProductByID(context.Context, *GetCatalogProductByIDRequest) (*GetCatalogProductByIDReply, error)
	GetSizeInfo(context.Context, *GetSizeInfoRequest) (*GetSizeInfoReply, error)
	GetCurrentSeasonByPlantationID(context.Context, *GetCurrentSeasonByPlantationIDRequest) (*GetCurrentSeasonByPlantationIDReply, error)
	GetVarietyName(context.Context, *GetVarietyNameRequest) (*GetVarietyNameResponse, error)
	GetProductName(context.Context, *GetProductNameRequest) (*GetProductNameResponse, error)
	// new
	GetProductAngVarietyNameWithImageURLAndColorId(context.Context, *GetProductAngVarietyNameWithImageURLAndColorIdRequest) (*GetProductAngVarietyNameWithImageURLAndColorIdResponse, error)
	mustEmbedUnimplementedCatalogServiceServer()
}

// UnimplementedCatalogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServiceServer struct {
}

func (UnimplementedCatalogServiceServer) GetCatalogProductByID(context.Context, *GetCatalogProductByIDRequest) (*GetCatalogProductByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalogProductByID not implemented")
}
func (UnimplementedCatalogServiceServer) GetSizeInfo(context.Context, *GetSizeInfoRequest) (*GetSizeInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSizeInfo not implemented")
}
func (UnimplementedCatalogServiceServer) GetCurrentSeasonByPlantationID(context.Context, *GetCurrentSeasonByPlantationIDRequest) (*GetCurrentSeasonByPlantationIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSeasonByPlantationID not implemented")
}
func (UnimplementedCatalogServiceServer) GetVarietyName(context.Context, *GetVarietyNameRequest) (*GetVarietyNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVarietyName not implemented")
}
func (UnimplementedCatalogServiceServer) GetProductName(context.Context, *GetProductNameRequest) (*GetProductNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductName not implemented")
}
func (UnimplementedCatalogServiceServer) GetProductAngVarietyNameWithImageURLAndColorId(context.Context, *GetProductAngVarietyNameWithImageURLAndColorIdRequest) (*GetProductAngVarietyNameWithImageURLAndColorIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAngVarietyNameWithImageURLAndColorId not implemented")
}
func (UnimplementedCatalogServiceServer) mustEmbedUnimplementedCatalogServiceServer() {}

// UnsafeCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServiceServer will
// result in compilation errors.
type UnsafeCatalogServiceServer interface {
	mustEmbedUnimplementedCatalogServiceServer()
}

func RegisterCatalogServiceServer(s grpc.ServiceRegistrar, srv CatalogServiceServer) {
	s.RegisterService(&CatalogService_ServiceDesc, srv)
}

func _CatalogService_GetCatalogProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatalogProductByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetCatalogProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/GetCatalogProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetCatalogProductByID(ctx, req.(*GetCatalogProductByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetSizeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSizeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetSizeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/GetSizeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetSizeInfo(ctx, req.(*GetSizeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetCurrentSeasonByPlantationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentSeasonByPlantationIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetCurrentSeasonByPlantationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/GetCurrentSeasonByPlantationID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetCurrentSeasonByPlantationID(ctx, req.(*GetCurrentSeasonByPlantationIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetVarietyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVarietyNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetVarietyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/GetVarietyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetVarietyName(ctx, req.(*GetVarietyNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetProductName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetProductName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/GetProductName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetProductName(ctx, req.(*GetProductNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetProductAngVarietyNameWithImageURLAndColorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductAngVarietyNameWithImageURLAndColorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetProductAngVarietyNameWithImageURLAndColorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/GetProductAngVarietyNameWithImageURLAndColorId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetProductAngVarietyNameWithImageURLAndColorId(ctx, req.(*GetProductAngVarietyNameWithImageURLAndColorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogService_ServiceDesc is the grpc.ServiceDesc for CatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCatalogProductByID",
			Handler:    _CatalogService_GetCatalogProductByID_Handler,
		},
		{
			MethodName: "GetSizeInfo",
			Handler:    _CatalogService_GetSizeInfo_Handler,
		},
		{
			MethodName: "GetCurrentSeasonByPlantationID",
			Handler:    _CatalogService_GetCurrentSeasonByPlantationID_Handler,
		},
		{
			MethodName: "GetVarietyName",
			Handler:    _CatalogService_GetVarietyName_Handler,
		},
		{
			MethodName: "GetProductName",
			Handler:    _CatalogService_GetProductName_Handler,
		},
		{
			MethodName: "GetProductAngVarietyNameWithImageURLAndColorId",
			Handler:    _CatalogService_GetProductAngVarietyNameWithImageURLAndColorId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/catalog-service.proto",
}
