// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServiceClient interface {
	GetWalletAmounts(ctx context.Context, in *GetWalletAmountsRequest, opts ...grpc.CallOption) (*GetWalletAmountsResponse, error)
	GetWalletAmount(ctx context.Context, in *GetWalletAmountRequest, opts ...grpc.CallOption) (*GetWalletAmountResponse, error)
	SendMoney(ctx context.Context, in *SendMoneyRequest, opts ...grpc.CallOption) (*SendMoneyResponse, error)
	PayoutOrder(ctx context.Context, in *PayoutOrderRequest, opts ...grpc.CallOption) (*PayoutOrderResponse, error)
	CompensateInvoice(ctx context.Context, in *CompensateInvoiceRequest, opts ...grpc.CallOption) (*CompensateInvoiceResponse, error)
	PerformRefund(ctx context.Context, in *PerformRefundRequest, opts ...grpc.CallOption) (*PerformRefundResponse, error)
	StartSimplePayOrderPayout(ctx context.Context, in *StartSimplePayOrderPayoutRequest, opts ...grpc.CallOption) (*StartSimplePayOrderResponse, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) GetWalletAmounts(ctx context.Context, in *GetWalletAmountsRequest, opts ...grpc.CallOption) (*GetWalletAmountsResponse, error) {
	out := new(GetWalletAmountsResponse)
	err := c.cc.Invoke(ctx, "/WalletService/GetWalletAmounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWalletAmount(ctx context.Context, in *GetWalletAmountRequest, opts ...grpc.CallOption) (*GetWalletAmountResponse, error) {
	out := new(GetWalletAmountResponse)
	err := c.cc.Invoke(ctx, "/WalletService/GetWalletAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SendMoney(ctx context.Context, in *SendMoneyRequest, opts ...grpc.CallOption) (*SendMoneyResponse, error) {
	out := new(SendMoneyResponse)
	err := c.cc.Invoke(ctx, "/WalletService/SendMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PayoutOrder(ctx context.Context, in *PayoutOrderRequest, opts ...grpc.CallOption) (*PayoutOrderResponse, error) {
	out := new(PayoutOrderResponse)
	err := c.cc.Invoke(ctx, "/WalletService/PayoutOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CompensateInvoice(ctx context.Context, in *CompensateInvoiceRequest, opts ...grpc.CallOption) (*CompensateInvoiceResponse, error) {
	out := new(CompensateInvoiceResponse)
	err := c.cc.Invoke(ctx, "/WalletService/CompensateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PerformRefund(ctx context.Context, in *PerformRefundRequest, opts ...grpc.CallOption) (*PerformRefundResponse, error) {
	out := new(PerformRefundResponse)
	err := c.cc.Invoke(ctx, "/WalletService/PerformRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) StartSimplePayOrderPayout(ctx context.Context, in *StartSimplePayOrderPayoutRequest, opts ...grpc.CallOption) (*StartSimplePayOrderResponse, error) {
	out := new(StartSimplePayOrderResponse)
	err := c.cc.Invoke(ctx, "/WalletService/StartSimplePayOrderPayout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility
type WalletServiceServer interface {
	GetWalletAmounts(context.Context, *GetWalletAmountsRequest) (*GetWalletAmountsResponse, error)
	GetWalletAmount(context.Context, *GetWalletAmountRequest) (*GetWalletAmountResponse, error)
	SendMoney(context.Context, *SendMoneyRequest) (*SendMoneyResponse, error)
	PayoutOrder(context.Context, *PayoutOrderRequest) (*PayoutOrderResponse, error)
	CompensateInvoice(context.Context, *CompensateInvoiceRequest) (*CompensateInvoiceResponse, error)
	PerformRefund(context.Context, *PerformRefundRequest) (*PerformRefundResponse, error)
	StartSimplePayOrderPayout(context.Context, *StartSimplePayOrderPayoutRequest) (*StartSimplePayOrderResponse, error)
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWalletServiceServer struct {
}

func (UnimplementedWalletServiceServer) GetWalletAmounts(context.Context, *GetWalletAmountsRequest) (*GetWalletAmountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletAmounts not implemented")
}
func (UnimplementedWalletServiceServer) GetWalletAmount(context.Context, *GetWalletAmountRequest) (*GetWalletAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletAmount not implemented")
}
func (UnimplementedWalletServiceServer) SendMoney(context.Context, *SendMoneyRequest) (*SendMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMoney not implemented")
}
func (UnimplementedWalletServiceServer) PayoutOrder(context.Context, *PayoutOrderRequest) (*PayoutOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayoutOrder not implemented")
}
func (UnimplementedWalletServiceServer) CompensateInvoice(context.Context, *CompensateInvoiceRequest) (*CompensateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompensateInvoice not implemented")
}
func (UnimplementedWalletServiceServer) PerformRefund(context.Context, *PerformRefundRequest) (*PerformRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformRefund not implemented")
}
func (UnimplementedWalletServiceServer) StartSimplePayOrderPayout(context.Context, *StartSimplePayOrderPayoutRequest) (*StartSimplePayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSimplePayOrderPayout not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_GetWalletAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletAmountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletService/GetWalletAmounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletAmounts(ctx, req.(*GetWalletAmountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWalletAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletService/GetWalletAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletAmount(ctx, req.(*GetWalletAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SendMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SendMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletService/SendMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SendMoney(ctx, req.(*SendMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PayoutOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayoutOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PayoutOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletService/PayoutOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PayoutOrder(ctx, req.(*PayoutOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CompensateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompensateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CompensateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletService/CompensateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CompensateInvoice(ctx, req.(*CompensateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PerformRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PerformRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletService/PerformRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PerformRefund(ctx, req.(*PerformRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_StartSimplePayOrderPayout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSimplePayOrderPayoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).StartSimplePayOrderPayout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WalletService/StartSimplePayOrderPayout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).StartSimplePayOrderPayout(ctx, req.(*StartSimplePayOrderPayoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWalletAmounts",
			Handler:    _WalletService_GetWalletAmounts_Handler,
		},
		{
			MethodName: "GetWalletAmount",
			Handler:    _WalletService_GetWalletAmount_Handler,
		},
		{
			MethodName: "SendMoney",
			Handler:    _WalletService_SendMoney_Handler,
		},
		{
			MethodName: "PayoutOrder",
			Handler:    _WalletService_PayoutOrder_Handler,
		},
		{
			MethodName: "CompensateInvoice",
			Handler:    _WalletService_CompensateInvoice_Handler,
		},
		{
			MethodName: "PerformRefund",
			Handler:    _WalletService_PerformRefund_Handler,
		},
		{
			MethodName: "StartSimplePayOrderPayout",
			Handler:    _WalletService_StartSimplePayOrderPayout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wallet-service.proto",
}
