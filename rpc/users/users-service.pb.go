// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.2
// source: users-service.proto

package users

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetUserByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetUserByIDRequest) Reset() {
	*x = GetUserByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByIDRequest) ProtoMessage() {}

func (x *GetUserByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByIDRequest.ProtoReflect.Descriptor instead.
func (*GetUserByIDRequest) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCompaniesByCountryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *GetCompaniesByCountryRequest) Reset() {
	*x = GetCompaniesByCountryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompaniesByCountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompaniesByCountryRequest) ProtoMessage() {}

func (x *GetCompaniesByCountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompaniesByCountryRequest.ProtoReflect.Descriptor instead.
func (*GetCompaniesByCountryRequest) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetCompaniesByCountryRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type GetCompaniesByCountryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Companies []*Company `protobuf:"bytes,1,rep,name=companies,proto3" json:"companies,omitempty"`
}

func (x *GetCompaniesByCountryReply) Reset() {
	*x = GetCompaniesByCountryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompaniesByCountryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompaniesByCountryReply) ProtoMessage() {}

func (x *GetCompaniesByCountryReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompaniesByCountryReply.ProtoReflect.Descriptor instead.
func (*GetCompaniesByCountryReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetCompaniesByCountryReply) GetCompanies() []*Company {
	if x != nil {
		return x.Companies
	}
	return nil
}

type GetBrokerCommissionByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *GetBrokerCommissionByIDRequest) Reset() {
	*x = GetBrokerCommissionByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrokerCommissionByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrokerCommissionByIDRequest) ProtoMessage() {}

func (x *GetBrokerCommissionByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrokerCommissionByIDRequest.ProtoReflect.Descriptor instead.
func (*GetBrokerCommissionByIDRequest) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetBrokerCommissionByIDRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

type GetBrokerCommissionByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commission int32 `protobuf:"varint,1,opt,name=commission,proto3" json:"commission,omitempty"`
}

func (x *GetBrokerCommissionByIDReply) Reset() {
	*x = GetBrokerCommissionByIDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrokerCommissionByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrokerCommissionByIDReply) ProtoMessage() {}

func (x *GetBrokerCommissionByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrokerCommissionByIDReply.ProtoReflect.Descriptor instead.
func (*GetBrokerCommissionByIDReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetBrokerCommissionByIDReply) GetCommission() int32 {
	if x != nil {
		return x.Commission
	}
	return 0
}

type CheckTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CheckTokenRequest) Reset() {
	*x = CheckTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenRequest) ProtoMessage() {}

func (x *CheckTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenRequest.ProtoReflect.Descriptor instead.
func (*CheckTokenRequest) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{5}
}

func (x *CheckTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetUserByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *GetUserByIDReply) Reset() {
	*x = GetUserByIDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByIDReply) ProtoMessage() {}

func (x *GetUserByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByIDReply.ProtoReflect.Descriptor instead.
func (*GetUserByIDReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserByIDReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type CheckTokenWithUserReturnedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CheckTokenWithUserReturnedRequest) Reset() {
	*x = CheckTokenWithUserReturnedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenWithUserReturnedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenWithUserReturnedRequest) ProtoMessage() {}

func (x *CheckTokenWithUserReturnedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenWithUserReturnedRequest.ProtoReflect.Descriptor instead.
func (*CheckTokenWithUserReturnedRequest) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{7}
}

func (x *CheckTokenWithUserReturnedRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CheckTokenWithUserReturnedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsValid bool   `protobuf:"varint,2,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
}

func (x *CheckTokenWithUserReturnedReply) Reset() {
	*x = CheckTokenWithUserReturnedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenWithUserReturnedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenWithUserReturnedReply) ProtoMessage() {}

func (x *CheckTokenWithUserReturnedReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenWithUserReturnedReply.ProtoReflect.Descriptor instead.
func (*CheckTokenWithUserReturnedReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{8}
}

func (x *CheckTokenWithUserReturnedReply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckTokenWithUserReturnedReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

type GetCompanyByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *GetCompanyByIDRequest) Reset() {
	*x = GetCompanyByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyByIDRequest) ProtoMessage() {}

func (x *GetCompanyByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyByIDRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyByIDRequest) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetCompanyByIDRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

type GetCompanyUsersByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *GetCompanyUsersByIDRequest) Reset() {
	*x = GetCompanyUsersByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyUsersByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyUsersByIDRequest) ProtoMessage() {}

func (x *GetCompanyUsersByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyUsersByIDRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyUsersByIDRequest) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetCompanyUsersByIDRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

type GetCompanyByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LegalName      string     `protobuf:"bytes,2,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	CommercialName string     `protobuf:"bytes,3,opt,name=commercial_name,json=commercialName,proto3" json:"commercial_name,omitempty"`
	Country        string     `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	RegNumber      string     `protobuf:"bytes,5,opt,name=reg_number,json=regNumber,proto3" json:"reg_number,omitempty"`
	LegalAddress   string     `protobuf:"bytes,6,opt,name=legal_address,json=legalAddress,proto3" json:"legal_address,omitempty"`
	RealAddress    string     `protobuf:"bytes,7,opt,name=real_address,json=realAddress,proto3" json:"real_address,omitempty"`
	Phone          string     `protobuf:"bytes,8,opt,name=phone,proto3" json:"phone,omitempty"`
	Email          string     `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`
	Site           string     `protobuf:"bytes,10,opt,name=site,proto3" json:"site,omitempty"`
	HandlerId      string     `protobuf:"bytes,11,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	TruckInfo      *TruckInfo `protobuf:"bytes,12,opt,name=truck_info,json=truckInfo,proto3" json:"truck_info,omitempty"`
	CargoName      string     `protobuf:"bytes,13,opt,name=cargo_name,json=cargoName,proto3" json:"cargo_name,omitempty"`
}

func (x *GetCompanyByIDReply) Reset() {
	*x = GetCompanyByIDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyByIDReply) ProtoMessage() {}

func (x *GetCompanyByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyByIDReply.ProtoReflect.Descriptor instead.
func (*GetCompanyByIDReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetCompanyByIDReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCompanyByIDReply) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *GetCompanyByIDReply) GetCommercialName() string {
	if x != nil {
		return x.CommercialName
	}
	return ""
}

func (x *GetCompanyByIDReply) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GetCompanyByIDReply) GetRegNumber() string {
	if x != nil {
		return x.RegNumber
	}
	return ""
}

func (x *GetCompanyByIDReply) GetLegalAddress() string {
	if x != nil {
		return x.LegalAddress
	}
	return ""
}

func (x *GetCompanyByIDReply) GetRealAddress() string {
	if x != nil {
		return x.RealAddress
	}
	return ""
}

func (x *GetCompanyByIDReply) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetCompanyByIDReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetCompanyByIDReply) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *GetCompanyByIDReply) GetHandlerId() string {
	if x != nil {
		return x.HandlerId
	}
	return ""
}

func (x *GetCompanyByIDReply) GetTruckInfo() *TruckInfo {
	if x != nil {
		return x.TruckInfo
	}
	return nil
}

func (x *GetCompanyByIDReply) GetCargoName() string {
	if x != nil {
		return x.CargoName
	}
	return ""
}

type TruckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Phone       string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	ContactName string `protobuf:"bytes,3,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
}

func (x *TruckInfo) Reset() {
	*x = TruckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruckInfo) ProtoMessage() {}

func (x *TruckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruckInfo.ProtoReflect.Descriptor instead.
func (*TruckInfo) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{12}
}

func (x *TruckInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TruckInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *TruckInfo) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

type GetCompanyUsersByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetCompanyUsersByIDReply) Reset() {
	*x = GetCompanyUsersByIDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyUsersByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyUsersByIDReply) ProtoMessage() {}

func (x *GetCompanyUsersByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyUsersByIDReply.ProtoReflect.Descriptor instead.
func (*GetCompanyUsersByIDReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetCompanyUsersByIDReply) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type CheckTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Group   int32  `protobuf:"varint,3,opt,name=group,proto3" json:"group,omitempty"`
	Role    int32  `protobuf:"varint,4,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *CheckTokenReply) Reset() {
	*x = CheckTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenReply) ProtoMessage() {}

func (x *CheckTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenReply.ProtoReflect.Descriptor instead.
func (*CheckTokenReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{14}
}

func (x *CheckTokenReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenReply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckTokenReply) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *CheckTokenReply) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

type CheckTokenIsSuperAdminReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid   bool   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Group     int32  `protobuf:"varint,5,opt,name=group,proto3" json:"group,omitempty"`
	Role      int32  `protobuf:"varint,6,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *CheckTokenIsSuperAdminReply) Reset() {
	*x = CheckTokenIsSuperAdminReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsSuperAdminReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsSuperAdminReply) ProtoMessage() {}

func (x *CheckTokenIsSuperAdminReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsSuperAdminReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsSuperAdminReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{15}
}

func (x *CheckTokenIsSuperAdminReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsSuperAdminReply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckTokenIsSuperAdminReply) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CheckTokenIsSuperAdminReply) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CheckTokenIsSuperAdminReply) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *CheckTokenIsSuperAdminReply) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

type CheckTokenIsBrokerGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid   bool   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Group     int32  `protobuf:"varint,5,opt,name=group,proto3" json:"group,omitempty"`
	Role      int32  `protobuf:"varint,6,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *CheckTokenIsBrokerGroupReply) Reset() {
	*x = CheckTokenIsBrokerGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsBrokerGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsBrokerGroupReply) ProtoMessage() {}

func (x *CheckTokenIsBrokerGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsBrokerGroupReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsBrokerGroupReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{16}
}

func (x *CheckTokenIsBrokerGroupReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsBrokerGroupReply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupReply) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupReply) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupReply) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *CheckTokenIsBrokerGroupReply) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

type CheckTokenIsBrokerGroupWithManagedCompanyIdsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid    bool     `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	UserId     string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FirstName  string   `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName   string   `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Group      int32    `protobuf:"varint,5,opt,name=group,proto3" json:"group,omitempty"`
	Role       int32    `protobuf:"varint,6,opt,name=role,proto3" json:"role,omitempty"`
	ManagedIds []string `protobuf:"bytes,7,rep,name=managed_ids,json=managedIds,proto3" json:"managed_ids,omitempty"`
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) Reset() {
	*x = CheckTokenIsBrokerGroupWithManagedCompanyIdsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) ProtoMessage() {}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsBrokerGroupWithManagedCompanyIdsReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{17}
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *CheckTokenIsBrokerGroupWithManagedCompanyIdsReply) GetManagedIds() []string {
	if x != nil {
		return x.ManagedIds
	}
	return nil
}

type CheckTokenIsBrokerGroupWithManagedUserIdsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid    bool     `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	UserId     string   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FirstName  string   `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName   string   `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Group      int32    `protobuf:"varint,5,opt,name=group,proto3" json:"group,omitempty"`
	Role       int32    `protobuf:"varint,6,opt,name=role,proto3" json:"role,omitempty"`
	ManagedIds []string `protobuf:"bytes,7,rep,name=managed_ids,json=managedIds,proto3" json:"managed_ids,omitempty"`
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) Reset() {
	*x = CheckTokenIsBrokerGroupWithManagedUserIdsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsBrokerGroupWithManagedUserIdsReply) ProtoMessage() {}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsBrokerGroupWithManagedUserIdsReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsBrokerGroupWithManagedUserIdsReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{18}
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *CheckTokenIsBrokerGroupWithManagedUserIdsReply) GetManagedIds() []string {
	if x != nil {
		return x.ManagedIds
	}
	return nil
}

type CheckTokenIsBrokerGroupWithManagedUsersDropdownReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid      bool            `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	UserId       string          `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FirstName    string          `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName     string          `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Group        int32           `protobuf:"varint,5,opt,name=group,proto3" json:"group,omitempty"`
	Role         int32           `protobuf:"varint,6,opt,name=role,proto3" json:"role,omitempty"`
	ManagedUsers []*DropdownUser `protobuf:"bytes,7,rep,name=managed_users,json=managedUsers,proto3" json:"managed_users,omitempty"`
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) Reset() {
	*x = CheckTokenIsBrokerGroupWithManagedUsersDropdownReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) ProtoMessage() {}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsBrokerGroupWithManagedUsersDropdownReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{19}
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *CheckTokenIsBrokerGroupWithManagedUsersDropdownReply) GetManagedUsers() []*DropdownUser {
	if x != nil {
		return x.ManagedUsers
	}
	return nil
}

type CheckTokenIsPlantationGroupWithUserAndCompanyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool     `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	User    *User    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Company *Company `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyReply) Reset() {
	*x = CheckTokenIsPlantationGroupWithUserAndCompanyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsPlantationGroupWithUserAndCompanyReply) ProtoMessage() {}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsPlantationGroupWithUserAndCompanyReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsPlantationGroupWithUserAndCompanyReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{20}
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyReply) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyReply) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

type CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool     `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	User    *User    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Company *Company `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
	UserIds []string `protobuf:"bytes,4,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) Reset() {
	*x = CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) ProtoMessage() {}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{21}
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid      bool            `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	User         *User           `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Company      *Company        `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
	ManagedUsers []*DropdownUser `protobuf:"bytes,4,rep,name=managed_users,json=managedUsers,proto3" json:"managed_users,omitempty"`
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) Reset() {
	*x = CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) ProtoMessage() {}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{22}
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetManagedUsers() []*DropdownUser {
	if x != nil {
		return x.ManagedUsers
	}
	return nil
}

type CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool     `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	User    *User    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Company *Company `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
	UserIds []string `protobuf:"bytes,4,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) Reset() {
	*x = CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) ProtoMessage() {}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{23}
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid      bool            `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	User         *User           `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Company      *Company        `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
	ManagedUsers []*DropdownUser `protobuf:"bytes,4,rep,name=managed_users,json=managedUsers,proto3" json:"managed_users,omitempty"`
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) Reset() {
	*x = CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) ProtoMessage() {}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{24}
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply) GetManagedUsers() []*DropdownUser {
	if x != nil {
		return x.ManagedUsers
	}
	return nil
}

type CheckTokenIsClientGroupWithUserAndCompanyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool     `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	User    *User    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Company *Company `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyReply) Reset() {
	*x = CheckTokenIsClientGroupWithUserAndCompanyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTokenIsClientGroupWithUserAndCompanyReply) ProtoMessage() {}

func (x *CheckTokenIsClientGroupWithUserAndCompanyReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTokenIsClientGroupWithUserAndCompanyReply.ProtoReflect.Descriptor instead.
func (*CheckTokenIsClientGroupWithUserAndCompanyReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{25}
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyReply) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyReply) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CheckTokenIsClientGroupWithUserAndCompanyReply) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Group     int32  `protobuf:"varint,4,opt,name=group,proto3" json:"group,omitempty"`
	Role      int32  `protobuf:"varint,5,opt,name=role,proto3" json:"role,omitempty"`
	Email     string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{26}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *User) GetRole() int32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LegalName        string `protobuf:"bytes,2,opt,name=legal_name,json=legalName,proto3" json:"legal_name,omitempty"`
	CommercialName   string `protobuf:"bytes,3,opt,name=commercial_name,json=commercialName,proto3" json:"commercial_name,omitempty"`
	HandlerId        string `protobuf:"bytes,4,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	CargoName        string `protobuf:"bytes,5,opt,name=cargo_name,json=cargoName,proto3" json:"cargo_name,omitempty"`
	BrokerCommission string `protobuf:"bytes,6,opt,name=broker_commission,json=brokerCommission,proto3" json:"broker_commission,omitempty"`
}

func (x *Company) Reset() {
	*x = Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{27}
}

func (x *Company) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Company) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *Company) GetCommercialName() string {
	if x != nil {
		return x.CommercialName
	}
	return ""
}

func (x *Company) GetHandlerId() string {
	if x != nil {
		return x.HandlerId
	}
	return ""
}

func (x *Company) GetCargoName() string {
	if x != nil {
		return x.CargoName
	}
	return ""
}

func (x *Company) GetBrokerCommission() string {
	if x != nil {
		return x.BrokerCommission
	}
	return ""
}

type DropdownUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CompanyName string `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
}

func (x *DropdownUser) Reset() {
	*x = DropdownUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropdownUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropdownUser) ProtoMessage() {}

func (x *DropdownUser) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropdownUser.ProtoReflect.Descriptor instead.
func (*DropdownUser) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{28}
}

func (x *DropdownUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DropdownUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DropdownUser) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type DecodeTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DecodeTokenRequest) Reset() {
	*x = DecodeTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeTokenRequest) ProtoMessage() {}

func (x *DecodeTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeTokenRequest.ProtoReflect.Descriptor instead.
func (*DecodeTokenRequest) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{29}
}

func (x *DecodeTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DecodeTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DecodeTokenReply) Reset() {
	*x = DecodeTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_users_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeTokenReply) ProtoMessage() {}

func (x *DecodeTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_users_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeTokenReply.ProtoReflect.Descriptor instead.
func (*DecodeTokenReply) Descriptor() ([]byte, []int) {
	return file_users_service_proto_rawDescGZIP(), []int{30}
}

func (x *DecodeTokenReply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

var File_users_service_proto protoreflect.FileDescriptor

var file_users_service_proto_rawDesc = []byte{
	0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x44, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x11,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x28, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x39, 0x0a, 0x21, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x55, 0x0a, 0x1f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x22, 0x36, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x97, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72,
	0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x72, 0x75, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x75, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x09, 0x54, 0x72, 0x75, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2c,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x6f, 0x0a, 0x0f,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xb7, 0x01,
	0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x31, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69,
	0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x49, 0x64, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57,
	0x69, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x64,
	0x73, 0x22, 0x84, 0x02, 0x0a, 0x34, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f,
	0x70, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x72,
	0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x32, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0xba, 0x01, 0x0a, 0x43, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x49, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x32,
	0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x3f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69,
	0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x45,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x32, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57,
	0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x22, 0x92, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xcc, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x72, 0x63, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x12, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2b, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x32, 0xbd, 0x0f, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x0a,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x62, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x22,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x76, 0x0a, 0x2c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57,
	0x69, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x73, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x70, 0x0a, 0x29,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7c,
	0x0a, 0x2f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57,
	0x69, 0x74, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44,
	0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x17,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x16, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x78, 0x0a, 0x2d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x9a, 0x01, 0x0a, 0x3e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0xa6, 0x01,
	0x0a, 0x44, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x72,
	0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x70, 0x0a, 0x29, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x92, 0x01, 0x0a, 0x3a, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x9e, 0x01,
	0x0a, 0x40, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x42, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x59, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1f, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a,
	0x0b, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x13, 0x2e, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x42, 0x11, 0x5a, 0x0f, 0x72, 0x70, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_users_service_proto_rawDescOnce sync.Once
	file_users_service_proto_rawDescData = file_users_service_proto_rawDesc
)

func file_users_service_proto_rawDescGZIP() []byte {
	file_users_service_proto_rawDescOnce.Do(func() {
		file_users_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_users_service_proto_rawDescData)
	})
	return file_users_service_proto_rawDescData
}

var file_users_service_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_users_service_proto_goTypes = []interface{}{
	(*GetUserByIDRequest)(nil),                                                        // 0: GetUserByIDRequest
	(*GetCompaniesByCountryRequest)(nil),                                              // 1: GetCompaniesByCountryRequest
	(*GetCompaniesByCountryReply)(nil),                                                // 2: GetCompaniesByCountryReply
	(*GetBrokerCommissionByIDRequest)(nil),                                            // 3: GetBrokerCommissionByIDRequest
	(*GetBrokerCommissionByIDReply)(nil),                                              // 4: GetBrokerCommissionByIDReply
	(*CheckTokenRequest)(nil),                                                         // 5: CheckTokenRequest
	(*GetUserByIDReply)(nil),                                                          // 6: GetUserByIDReply
	(*CheckTokenWithUserReturnedRequest)(nil),                                         // 7: CheckTokenWithUserReturnedRequest
	(*CheckTokenWithUserReturnedReply)(nil),                                           // 8: CheckTokenWithUserReturnedReply
	(*GetCompanyByIDRequest)(nil),                                                     // 9: GetCompanyByIDRequest
	(*GetCompanyUsersByIDRequest)(nil),                                                // 10: GetCompanyUsersByIDRequest
	(*GetCompanyByIDReply)(nil),                                                       // 11: GetCompanyByIDReply
	(*TruckInfo)(nil),                                                                 // 12: TruckInfo
	(*GetCompanyUsersByIDReply)(nil),                                                  // 13: GetCompanyUsersByIDReply
	(*CheckTokenReply)(nil),                                                           // 14: CheckTokenReply
	(*CheckTokenIsSuperAdminReply)(nil),                                               // 15: CheckTokenIsSuperAdminReply
	(*CheckTokenIsBrokerGroupReply)(nil),                                              // 16: CheckTokenIsBrokerGroupReply
	(*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply)(nil),                         // 17: CheckTokenIsBrokerGroupWithManagedCompanyIdsReply
	(*CheckTokenIsBrokerGroupWithManagedUserIdsReply)(nil),                            // 18: CheckTokenIsBrokerGroupWithManagedUserIdsReply
	(*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply)(nil),                      // 19: CheckTokenIsBrokerGroupWithManagedUsersDropdownReply
	(*CheckTokenIsPlantationGroupWithUserAndCompanyReply)(nil),                        // 20: CheckTokenIsPlantationGroupWithUserAndCompanyReply
	(*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply)(nil),       // 21: CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply
	(*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply)(nil), // 22: CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply
	(*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply)(nil),           // 23: CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply
	(*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply)(nil),     // 24: CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply
	(*CheckTokenIsClientGroupWithUserAndCompanyReply)(nil),                            // 25: CheckTokenIsClientGroupWithUserAndCompanyReply
	(*User)(nil),               // 26: User
	(*Company)(nil),            // 27: Company
	(*DropdownUser)(nil),       // 28: DropdownUser
	(*DecodeTokenRequest)(nil), // 29: DecodeTokenRequest
	(*DecodeTokenReply)(nil),   // 30: DecodeTokenReply
}
var file_users_service_proto_depIdxs = []int32{
	27, // 0: GetCompaniesByCountryReply.companies:type_name -> Company
	12, // 1: GetCompanyByIDReply.truck_info:type_name -> TruckInfo
	28, // 2: CheckTokenIsBrokerGroupWithManagedUsersDropdownReply.managed_users:type_name -> DropdownUser
	26, // 3: CheckTokenIsPlantationGroupWithUserAndCompanyReply.user:type_name -> User
	27, // 4: CheckTokenIsPlantationGroupWithUserAndCompanyReply.company:type_name -> Company
	26, // 5: CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply.user:type_name -> User
	27, // 6: CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply.company:type_name -> Company
	26, // 7: CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply.user:type_name -> User
	27, // 8: CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply.company:type_name -> Company
	28, // 9: CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply.managed_users:type_name -> DropdownUser
	26, // 10: CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply.user:type_name -> User
	27, // 11: CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply.company:type_name -> Company
	26, // 12: CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply.user:type_name -> User
	27, // 13: CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply.company:type_name -> Company
	28, // 14: CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply.managed_users:type_name -> DropdownUser
	26, // 15: CheckTokenIsClientGroupWithUserAndCompanyReply.user:type_name -> User
	27, // 16: CheckTokenIsClientGroupWithUserAndCompanyReply.company:type_name -> Company
	0,  // 17: UsersService.GetUserByID:input_type -> GetUserByIDRequest
	5,  // 18: UsersService.CheckToken:input_type -> CheckTokenRequest
	7,  // 19: UsersService.CheckTokenWithUserReturned:input_type -> CheckTokenWithUserReturnedRequest
	5,  // 20: UsersService.CheckTokenIsBrokerGroupWithManagedCompanyIds:input_type -> CheckTokenRequest
	5,  // 21: UsersService.CheckTokenIsBrokerGroupWithManagedUserIds:input_type -> CheckTokenRequest
	5,  // 22: UsersService.CheckTokenIsBrokerGroupWithManagedUsersDropdown:input_type -> CheckTokenRequest
	5,  // 23: UsersService.CheckTokenIsBrokerGroup:input_type -> CheckTokenRequest
	5,  // 24: UsersService.CheckTokenIsSuperAdmin:input_type -> CheckTokenRequest
	5,  // 25: UsersService.CheckTokenIsPlantationGroupWithUserAndCompany:input_type -> CheckTokenRequest
	5,  // 26: UsersService.CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs:input_type -> CheckTokenRequest
	5,  // 27: UsersService.CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown:input_type -> CheckTokenRequest
	5,  // 28: UsersService.CheckTokenIsClientGroupWithUserAndCompany:input_type -> CheckTokenRequest
	5,  // 29: UsersService.CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs:input_type -> CheckTokenRequest
	5,  // 30: UsersService.CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown:input_type -> CheckTokenRequest
	9,  // 31: UsersService.GetCompanyByID:input_type -> GetCompanyByIDRequest
	10, // 32: UsersService.GetCompanyUsersByID:input_type -> GetCompanyUsersByIDRequest
	1,  // 33: UsersService.GetCompaniesByCountry:input_type -> GetCompaniesByCountryRequest
	3,  // 34: UsersService.GetBrokerCommissionByID:input_type -> GetBrokerCommissionByIDRequest
	29, // 35: UsersService.DecodeToken:input_type -> DecodeTokenRequest
	6,  // 36: UsersService.GetUserByID:output_type -> GetUserByIDReply
	14, // 37: UsersService.CheckToken:output_type -> CheckTokenReply
	8,  // 38: UsersService.CheckTokenWithUserReturned:output_type -> CheckTokenWithUserReturnedReply
	17, // 39: UsersService.CheckTokenIsBrokerGroupWithManagedCompanyIds:output_type -> CheckTokenIsBrokerGroupWithManagedCompanyIdsReply
	18, // 40: UsersService.CheckTokenIsBrokerGroupWithManagedUserIds:output_type -> CheckTokenIsBrokerGroupWithManagedUserIdsReply
	19, // 41: UsersService.CheckTokenIsBrokerGroupWithManagedUsersDropdown:output_type -> CheckTokenIsBrokerGroupWithManagedUsersDropdownReply
	16, // 42: UsersService.CheckTokenIsBrokerGroup:output_type -> CheckTokenIsBrokerGroupReply
	15, // 43: UsersService.CheckTokenIsSuperAdmin:output_type -> CheckTokenIsSuperAdminReply
	20, // 44: UsersService.CheckTokenIsPlantationGroupWithUserAndCompany:output_type -> CheckTokenIsPlantationGroupWithUserAndCompanyReply
	21, // 45: UsersService.CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs:output_type -> CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply
	22, // 46: UsersService.CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown:output_type -> CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply
	25, // 47: UsersService.CheckTokenIsClientGroupWithUserAndCompany:output_type -> CheckTokenIsClientGroupWithUserAndCompanyReply
	23, // 48: UsersService.CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs:output_type -> CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply
	24, // 49: UsersService.CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown:output_type -> CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply
	11, // 50: UsersService.GetCompanyByID:output_type -> GetCompanyByIDReply
	13, // 51: UsersService.GetCompanyUsersByID:output_type -> GetCompanyUsersByIDReply
	2,  // 52: UsersService.GetCompaniesByCountry:output_type -> GetCompaniesByCountryReply
	4,  // 53: UsersService.GetBrokerCommissionByID:output_type -> GetBrokerCommissionByIDReply
	30, // 54: UsersService.DecodeToken:output_type -> DecodeTokenReply
	36, // [36:55] is the sub-list for method output_type
	17, // [17:36] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_users_service_proto_init() }
func file_users_service_proto_init() {
	if File_users_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_users_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompaniesByCountryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompaniesByCountryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrokerCommissionByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrokerCommissionByIDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByIDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenWithUserReturnedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenWithUserReturnedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyUsersByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyByIDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyUsersByIDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsSuperAdminReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsBrokerGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsBrokerGroupWithManagedUserIdsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsPlantationGroupWithUserAndCompanyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTokenIsClientGroupWithUserAndCompanyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropdownUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_users_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_users_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_users_service_proto_goTypes,
		DependencyIndexes: file_users_service_proto_depIdxs,
		MessageInfos:      file_users_service_proto_msgTypes,
	}.Build()
	File_users_service_proto = out.File
	file_users_service_proto_rawDesc = nil
	file_users_service_proto_goTypes = nil
	file_users_service_proto_depIdxs = nil
}
