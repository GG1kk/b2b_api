// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDReply, error)
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenReply, error)
	CheckTokenWithUserReturned(ctx context.Context, in *CheckTokenWithUserReturnedRequest, opts ...grpc.CallOption) (*CheckTokenWithUserReturnedReply, error)
	CheckTokenIsBrokerGroupWithManagedCompanyIds(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply, error)
	CheckTokenIsBrokerGroupWithManagedUserIds(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupWithManagedUserIdsReply, error)
	CheckTokenIsBrokerGroupWithManagedUsersDropdown(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply, error)
	CheckTokenIsBrokerGroup(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupReply, error)
	CheckTokenIsSuperAdmin(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsSuperAdminReply, error)
	CheckTokenIsPlantationGroupWithUserAndCompany(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsPlantationGroupWithUserAndCompanyReply, error)
	CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply, error)
	CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error)
	CheckTokenIsClientGroupWithUserAndCompany(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsClientGroupWithUserAndCompanyReply, error)
	CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply, error)
	CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error)
	GetCompanyByID(ctx context.Context, in *GetCompanyByIDRequest, opts ...grpc.CallOption) (*GetCompanyByIDReply, error)
	GetCompanyUsersByID(ctx context.Context, in *GetCompanyUsersByIDRequest, opts ...grpc.CallOption) (*GetCompanyUsersByIDReply, error)
	GetCompaniesByCountry(ctx context.Context, in *GetCompaniesByCountryRequest, opts ...grpc.CallOption) (*GetCompaniesByCountryReply, error)
	GetBrokerCommissionByID(ctx context.Context, in *GetBrokerCommissionByIDRequest, opts ...grpc.CallOption) (*GetBrokerCommissionByIDReply, error)
	DecodeToken(ctx context.Context, in *DecodeTokenRequest, opts ...grpc.CallOption) (*DecodeTokenReply, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDReply, error) {
	out := new(GetUserByIDReply)
	err := c.cc.Invoke(ctx, "/UsersService/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenReply, error) {
	out := new(CheckTokenReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenWithUserReturned(ctx context.Context, in *CheckTokenWithUserReturnedRequest, opts ...grpc.CallOption) (*CheckTokenWithUserReturnedReply, error) {
	out := new(CheckTokenWithUserReturnedReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenWithUserReturned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsBrokerGroupWithManagedCompanyIds(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply, error) {
	out := new(CheckTokenIsBrokerGroupWithManagedCompanyIdsReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsBrokerGroupWithManagedCompanyIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsBrokerGroupWithManagedUserIds(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupWithManagedUserIdsReply, error) {
	out := new(CheckTokenIsBrokerGroupWithManagedUserIdsReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsBrokerGroupWithManagedUserIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsBrokerGroupWithManagedUsersDropdown(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply, error) {
	out := new(CheckTokenIsBrokerGroupWithManagedUsersDropdownReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsBrokerGroupWithManagedUsersDropdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsBrokerGroup(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsBrokerGroupReply, error) {
	out := new(CheckTokenIsBrokerGroupReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsBrokerGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsSuperAdmin(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsSuperAdminReply, error) {
	out := new(CheckTokenIsSuperAdminReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsSuperAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsPlantationGroupWithUserAndCompany(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsPlantationGroupWithUserAndCompanyReply, error) {
	out := new(CheckTokenIsPlantationGroupWithUserAndCompanyReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsPlantationGroupWithUserAndCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply, error) {
	out := new(CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error) {
	out := new(CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsClientGroupWithUserAndCompany(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsClientGroupWithUserAndCompanyReply, error) {
	out := new(CheckTokenIsClientGroupWithUserAndCompanyReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsClientGroupWithUserAndCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply, error) {
	out := new(CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error) {
	out := new(CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply)
	err := c.cc.Invoke(ctx, "/UsersService/CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetCompanyByID(ctx context.Context, in *GetCompanyByIDRequest, opts ...grpc.CallOption) (*GetCompanyByIDReply, error) {
	out := new(GetCompanyByIDReply)
	err := c.cc.Invoke(ctx, "/UsersService/GetCompanyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetCompanyUsersByID(ctx context.Context, in *GetCompanyUsersByIDRequest, opts ...grpc.CallOption) (*GetCompanyUsersByIDReply, error) {
	out := new(GetCompanyUsersByIDReply)
	err := c.cc.Invoke(ctx, "/UsersService/GetCompanyUsersByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetCompaniesByCountry(ctx context.Context, in *GetCompaniesByCountryRequest, opts ...grpc.CallOption) (*GetCompaniesByCountryReply, error) {
	out := new(GetCompaniesByCountryReply)
	err := c.cc.Invoke(ctx, "/UsersService/GetCompaniesByCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) GetBrokerCommissionByID(ctx context.Context, in *GetBrokerCommissionByIDRequest, opts ...grpc.CallOption) (*GetBrokerCommissionByIDReply, error) {
	out := new(GetBrokerCommissionByIDReply)
	err := c.cc.Invoke(ctx, "/UsersService/GetBrokerCommissionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DecodeToken(ctx context.Context, in *DecodeTokenRequest, opts ...grpc.CallOption) (*DecodeTokenReply, error) {
	out := new(DecodeTokenReply)
	err := c.cc.Invoke(ctx, "/UsersService/DecodeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDReply, error)
	CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenReply, error)
	CheckTokenWithUserReturned(context.Context, *CheckTokenWithUserReturnedRequest) (*CheckTokenWithUserReturnedReply, error)
	CheckTokenIsBrokerGroupWithManagedCompanyIds(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply, error)
	CheckTokenIsBrokerGroupWithManagedUserIds(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupWithManagedUserIdsReply, error)
	CheckTokenIsBrokerGroupWithManagedUsersDropdown(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply, error)
	CheckTokenIsBrokerGroup(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupReply, error)
	CheckTokenIsSuperAdmin(context.Context, *CheckTokenRequest) (*CheckTokenIsSuperAdminReply, error)
	CheckTokenIsPlantationGroupWithUserAndCompany(context.Context, *CheckTokenRequest) (*CheckTokenIsPlantationGroupWithUserAndCompanyReply, error)
	CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs(context.Context, *CheckTokenRequest) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply, error)
	CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown(context.Context, *CheckTokenRequest) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error)
	CheckTokenIsClientGroupWithUserAndCompany(context.Context, *CheckTokenRequest) (*CheckTokenIsClientGroupWithUserAndCompanyReply, error)
	CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs(context.Context, *CheckTokenRequest) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply, error)
	CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown(context.Context, *CheckTokenRequest) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error)
	GetCompanyByID(context.Context, *GetCompanyByIDRequest) (*GetCompanyByIDReply, error)
	GetCompanyUsersByID(context.Context, *GetCompanyUsersByIDRequest) (*GetCompanyUsersByIDReply, error)
	GetCompaniesByCountry(context.Context, *GetCompaniesByCountryRequest) (*GetCompaniesByCountryReply, error)
	GetBrokerCommissionByID(context.Context, *GetBrokerCommissionByIDRequest) (*GetBrokerCommissionByIDReply, error)
	DecodeToken(context.Context, *DecodeTokenRequest) (*DecodeTokenReply, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedUsersServiceServer) CheckToken(context.Context, *CheckTokenRequest) (*CheckTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedUsersServiceServer) CheckTokenWithUserReturned(context.Context, *CheckTokenWithUserReturnedRequest) (*CheckTokenWithUserReturnedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenWithUserReturned not implemented")
}
func (UnimplementedUsersServiceServer) CheckTokenIsBrokerGroupWithManagedCompanyIds(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupWithManagedCompanyIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsBrokerGroupWithManagedCompanyIds not implemented")
}
func (UnimplementedUsersServiceServer) CheckTokenIsBrokerGroupWithManagedUserIds(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupWithManagedUserIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsBrokerGroupWithManagedUserIds not implemented")
}
func (UnimplementedUsersServiceServer) CheckTokenIsBrokerGroupWithManagedUsersDropdown(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupWithManagedUsersDropdownReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsBrokerGroupWithManagedUsersDropdown not implemented")
}
func (UnimplementedUsersServiceServer) CheckTokenIsBrokerGroup(context.Context, *CheckTokenRequest) (*CheckTokenIsBrokerGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsBrokerGroup not implemented")
}
func (UnimplementedUsersServiceServer) CheckTokenIsSuperAdmin(context.Context, *CheckTokenRequest) (*CheckTokenIsSuperAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsSuperAdmin not implemented")
}
func (UnimplementedUsersServiceServer) CheckTokenIsPlantationGroupWithUserAndCompany(context.Context, *CheckTokenRequest) (*CheckTokenIsPlantationGroupWithUserAndCompanyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsPlantationGroupWithUserAndCompany not implemented")
}
func (UnimplementedUsersServiceServer) CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs(context.Context, *CheckTokenRequest) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs not implemented")
}
func (UnimplementedUsersServiceServer) CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown(context.Context, *CheckTokenRequest) (*CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown not implemented")
}
func (UnimplementedUsersServiceServer) CheckTokenIsClientGroupWithUserAndCompany(context.Context, *CheckTokenRequest) (*CheckTokenIsClientGroupWithUserAndCompanyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsClientGroupWithUserAndCompany not implemented")
}
func (UnimplementedUsersServiceServer) CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs(context.Context, *CheckTokenRequest) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs not implemented")
}
func (UnimplementedUsersServiceServer) CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown(context.Context, *CheckTokenRequest) (*CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdownReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown not implemented")
}
func (UnimplementedUsersServiceServer) GetCompanyByID(context.Context, *GetCompanyByIDRequest) (*GetCompanyByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyByID not implemented")
}
func (UnimplementedUsersServiceServer) GetCompanyUsersByID(context.Context, *GetCompanyUsersByIDRequest) (*GetCompanyUsersByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyUsersByID not implemented")
}
func (UnimplementedUsersServiceServer) GetCompaniesByCountry(context.Context, *GetCompaniesByCountryRequest) (*GetCompaniesByCountryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompaniesByCountry not implemented")
}
func (UnimplementedUsersServiceServer) GetBrokerCommissionByID(context.Context, *GetBrokerCommissionByIDRequest) (*GetBrokerCommissionByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerCommissionByID not implemented")
}
func (UnimplementedUsersServiceServer) DecodeToken(context.Context, *DecodeTokenRequest) (*DecodeTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeToken not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenWithUserReturned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenWithUserReturnedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenWithUserReturned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenWithUserReturned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenWithUserReturned(ctx, req.(*CheckTokenWithUserReturnedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsBrokerGroupWithManagedCompanyIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroupWithManagedCompanyIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsBrokerGroupWithManagedCompanyIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroupWithManagedCompanyIds(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsBrokerGroupWithManagedUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroupWithManagedUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsBrokerGroupWithManagedUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroupWithManagedUserIds(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsBrokerGroupWithManagedUsersDropdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroupWithManagedUsersDropdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsBrokerGroupWithManagedUsersDropdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroupWithManagedUsersDropdown(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsBrokerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsBrokerGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsBrokerGroup(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsSuperAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsSuperAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsSuperAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsSuperAdmin(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsPlantationGroupWithUserAndCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsPlantationGroupWithUserAndCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsPlantationGroupWithUserAndCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsPlantationGroupWithUserAndCompany(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsClientGroupWithUserAndCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsClientGroupWithUserAndCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsClientGroupWithUserAndCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsClientGroupWithUserAndCompany(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetCompanyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetCompanyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetCompanyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetCompanyByID(ctx, req.(*GetCompanyByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetCompanyUsersByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyUsersByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetCompanyUsersByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetCompanyUsersByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetCompanyUsersByID(ctx, req.(*GetCompanyUsersByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetCompaniesByCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompaniesByCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetCompaniesByCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetCompaniesByCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetCompaniesByCountry(ctx, req.(*GetCompaniesByCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_GetBrokerCommissionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrokerCommissionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetBrokerCommissionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetBrokerCommissionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetBrokerCommissionByID(ctx, req.(*GetBrokerCommissionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DecodeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DecodeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/DecodeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DecodeToken(ctx, req.(*DecodeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByID",
			Handler:    _UsersService_GetUserByID_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _UsersService_CheckToken_Handler,
		},
		{
			MethodName: "CheckTokenWithUserReturned",
			Handler:    _UsersService_CheckTokenWithUserReturned_Handler,
		},
		{
			MethodName: "CheckTokenIsBrokerGroupWithManagedCompanyIds",
			Handler:    _UsersService_CheckTokenIsBrokerGroupWithManagedCompanyIds_Handler,
		},
		{
			MethodName: "CheckTokenIsBrokerGroupWithManagedUserIds",
			Handler:    _UsersService_CheckTokenIsBrokerGroupWithManagedUserIds_Handler,
		},
		{
			MethodName: "CheckTokenIsBrokerGroupWithManagedUsersDropdown",
			Handler:    _UsersService_CheckTokenIsBrokerGroupWithManagedUsersDropdown_Handler,
		},
		{
			MethodName: "CheckTokenIsBrokerGroup",
			Handler:    _UsersService_CheckTokenIsBrokerGroup_Handler,
		},
		{
			MethodName: "CheckTokenIsSuperAdmin",
			Handler:    _UsersService_CheckTokenIsSuperAdmin_Handler,
		},
		{
			MethodName: "CheckTokenIsPlantationGroupWithUserAndCompany",
			Handler:    _UsersService_CheckTokenIsPlantationGroupWithUserAndCompany_Handler,
		},
		{
			MethodName: "CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs",
			Handler:    _UsersService_CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUserIDs_Handler,
		},
		{
			MethodName: "CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown",
			Handler:    _UsersService_CheckTokenIsPlantationGroupWithUserAndCompanyAndCompanyUsersDropdown_Handler,
		},
		{
			MethodName: "CheckTokenIsClientGroupWithUserAndCompany",
			Handler:    _UsersService_CheckTokenIsClientGroupWithUserAndCompany_Handler,
		},
		{
			MethodName: "CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs",
			Handler:    _UsersService_CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUserIDs_Handler,
		},
		{
			MethodName: "CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown",
			Handler:    _UsersService_CheckTokenIsClientGroupWithUserAndCompanyAndCompanyUsersDropdown_Handler,
		},
		{
			MethodName: "GetCompanyByID",
			Handler:    _UsersService_GetCompanyByID_Handler,
		},
		{
			MethodName: "GetCompanyUsersByID",
			Handler:    _UsersService_GetCompanyUsersByID_Handler,
		},
		{
			MethodName: "GetCompaniesByCountry",
			Handler:    _UsersService_GetCompaniesByCountry_Handler,
		},
		{
			MethodName: "GetBrokerCommissionByID",
			Handler:    _UsersService_GetBrokerCommissionByID_Handler,
		},
		{
			MethodName: "DecodeToken",
			Handler:    _UsersService_DecodeToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/users-service.proto",
}
